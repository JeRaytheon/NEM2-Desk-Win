{"version":3,"sources":["webpack:///./node_modules/bs58check/base.js","webpack:///./node_modules/bs58/index.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/CurveAlgorithm.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/ExtendedKey.js","webpack:///./node_modules/typeforce/extra.js","webpack:///./node_modules/bip39/src/index.js","webpack:///./node_modules/tiny-secp256k1/js.js","webpack:///./node_modules/bip32/index.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/MnemonicPassPhrase.js","webpack:///./node_modules/base-x/src/index.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/MACImpl.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/MACType.js","webpack:///./node_modules/typeforce/native.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/Wallet.js","webpack:///./node_modules/bs58check/index.js","webpack:///./node_modules/typeforce/index.js","webpack:///./node_modules/bip32/crypto.js","webpack:///./node_modules/typeforce/errors.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/Network.js","webpack:///./node_modules/bip39/src/_wordlists.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/Curves/NodeEd25519.js","webpack:///./node_modules/wif/index.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/Compat/DeterministicKey.js","webpack:///./node_modules/nem2-hd-wallets/dist/index.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/Cryptography.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/CatapultECC.js","webpack:///./node_modules/nem2-hd-wallets/dist/src/KeyEncoding.js","webpack:///./node_modules/tiny-secp256k1/rfc6979.js","webpack:///index.ts"],"names":["base58","__webpack_require__","Buffer","module","exports","checksumFn","encode","payload","checksum","concat","length","decodeRaw","buffer","slice","newChecksum","decodeUnsafe","string","decode","Error","basex","ALPHABET","Object","defineProperty","value","CurveAlgorithm","__importStar","this","mod","__esModule","result","k","hasOwnProperty","call","bip32","bs58check","index_1","ExtendedKey","[object Object]","node","network","Network","BITCOIN","macType","MACType","HMAC","NodeEd25519","CATAPULT","fromBase58","seed","fromSeed","from","path","derived","derivePath","isNeutered","toBase58","parent","readUInt32BE","neutered","encoding","KeyEncoding","ENC_HEX","encodeAs","privateKey","publicKey","byteLength","key","toString","DEFAULT_MAC_TYPE","NATIVE","ERRORS","_Buffer","isBuffer","Hex","test","_LengthN","type","name","toJSON","Length","tfCustomError","_ArrayN","bind","Array","_BufferN","_HexN","_StringN","String","Range","a","b","f","_range","strict","Number","INT53_MAX","Math","pow","Finite","isFinite","Int8","Int16","Int32","Int53","floor","UInt8","UInt16","UInt32","UInt53","types","ArrayN","BufferN","HexN","StringN","typeName","t","createHash","pbkdf2_1","randomBytes","_wordlists_1","DEFAULT_WORDLIST","_default","INVALID_MNEMONIC","INVALID_ENTROPY","INVALID_CHECKSUM","WORDLIST_REQUIRED","lpad","str","padString","binaryToByte","bin","parseInt","bytesToBinary","bytes","map","x","join","deriveChecksumBits","entropyBuffer","ENT","CS","hash","update","digest","salt","password","mnemonicToSeedSync","mnemonic","mnemonicBuffer","normalize","saltBuffer","pbkdf2Sync","mnemonicToSeed","Promise","resolve","reject","pbkdf2","err","data","error","mnemonicToEntropy","wordlist","words","split","bits","word","index","indexOf","dividerIndex","entropyBits","checksumBits","entropyBytes","match","entropy","entropyToMnemonic","TypeError","chunks","binary","generateMnemonic","strength","rng","validateMnemonic","e","setDefaultWordlist","language","wordlists","getDefaultWordlist","keys","filter","lang","every","_wordlists_2","BN","EC","ec","secp256k1","deterministicGenerateK","ZERO32","alloc","EC_GROUP_ORDER","EC_P","n","curve","nDiv2","shrn","G","g","THROW_BAD_PRIVATE","THROW_BAD_POINT","THROW_BAD_TWEAK","THROW_BAD_HASH","THROW_BAD_SIGNATURE","THROW_BAD_EXTRA_DATA","isScalar","isOrderScalar","compare","isPoint","p","decodeFrom","y","__isPointCompressed","isPointCompressed","isPrivate","isSignature","r","s","assumeCompression","pubkey","undefined","fromBuffer","d","toBuffer","toArrayLike","P","decodePoint","getEncoded","compressed","_encode","pointAdd","pA","pB","__compressed","pp","add","isInfinity","pointAddScalar","tweak","tt","qq","mul","uu","pointCompress","pointFromScalar","dd","pointMultiply","privateAdd","dt","umod","privateSub","sub","sign","__sign","signWithEntropy","addData","checkSig","kI","Q","isZero","invm","cmp","allocUnsafe","copy","verify","q","signature","gtn","sInv","u1","u2","R","mulAdd","xR","v","eq","crypto","ecc","typeforce","wif","UINT256_TYPE","NETWORK_TYPE","compile","public","private","BIP32","chainCode","__d","__Q","depth","parentFingerprint","prototype","get","hash160","identifier","enumerable","fromPublicKey","version","writeUInt32BE","writeUInt8","toWIF","HIGHEST_BIT","derive","isHardened","hd","I","hmacSHA512","IL","IR","Ki","ki","fromPrivateKey","fingerprint","UINT31_MAX","UInt31","BIP32Path","readUInt8","X","deriveHardened","splitPath","reduce","prevHd","indexStr","bip39","nem2_sdk_1","MnemonicPassPhrase","plain","DEFAULT_LANGUAGE","DEFAULT_STRENGTH","CATAPULT_RNG","assertLanguageSupported","Crypto","base","BASE_MAP","Uint8Array","fill","i","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","source","zeroes","pbegin","pend","size","b58","carry","it1","it2","repeat","psz","b256","it3","it4","vch","j","MACImpl","publicSalt","KMAC","Cryptography","constructor","Boolean","Function","Nil","","Null","Wallet","extendedKey","readOnly","getPublicKey","ENC_BIN","networkType","NetworkType","MIJIN_TEST","Account","createFromPrivateKey","getPrivateKey","PublicAccount","createFromPublicKey","DEFAULT_WALLET_PATH","childKeyNode","bs58checkBase","sha256x2","tmp","tfJSON","TfTypeError","TfPropertyTypeError","tfSubError","getValueTypeName","TYPES","arrayOf","options","_arrayOf","array","minLength","maxLength","Infinity","maybe","_maybe","propertyType","propertyKeyType","_map","propertyName","propertyValue","object","uncompiled","typePropertyName","_object","anyOf","arguments","_anyOf","some","allOf","_allOf","quacksLike","_quacksLike","tuple","_tuple","values","expected","_value","actual","surrogate","oneOf","EXTRA","createHmac","sha256Hash","native","getTypeName","fn","getValue","JSON","stringify","captureStackTrace","tfErrorString","valueTypeName","valueJson","message","__type","__value","__valueTypeName","tfPropertyErrorString","label","description","property","__label","__property","create","publicKeyPrefix","privateKeyPrefix","ed25519","chinese_simplified","chinese_traditional","korean","french","italian","spanish","japanese","JA","english","EN","CKDPriv","indexBuffer","DeterministicKey","kL","kR","inString","getQ","extract","CatapultECC","extractPublicKey","sha3Hash","getDepth","getIndex","getParentFingerprint","isValidPath","replace","parentKey","secretKey","hasher","createSha3Hasher","encodeRaw","__D","__DEPTH","__INDEX","__PARENT_FINGERPRINT","CurveAlgorithm_1","MACType_1","MACImpl_1","KeyEncoding_1","Network_1","Cryptography_1","CatapultECC_1","DeterministicKey_1","NodeEd25519_1","MnemonicPassPhrase_1","ExtendedKey_1","Wallet_1","js_sha3_1","hex","kmac256","dest","SHA3Hasher","func","createHasher","nacl_catapult","sk","hashfunc","HASH_SIZE","clamp","c","prepareForScalarMult","gf","pk","KEY_SIZE","scalarbase","pack","m","reset","finalize","subarray","HALF_HASH_SIZE","SIGNATURE_SIZE","h","HALF_SIGNATURE_SIZE","Float64Array","RawArray","modL","encodedSChecker","requireValid","isCanonical","isZeroFilled","unpackneg","scalarmult","crypto_verify_32","sharedKey","sharedKeyHash","Is_Reduced","Is_Zero","validateEncodedSPart","deepEqual","ONE1","ZERO1","extraEntropy","T","__webpack_exports__","bandedNamespace","AppConfig","Message","apiUrl","marketUrl","COPY_SUCCESS","SUCCESS","OPERATION_SUCCESS","UPDATE_SUCCESS","PLEASE_SET_WALLET_PASSWORD_INFO","PLEASE_ENTER_MNEMONIC_INFO","PLEASE_SWITCH_NETWORK","NO_MNEMONIC_INFO","WALLET_NAME_INPUT_ERROR","PASSWORD_CREATE_ERROR","INCONSISTENT_PASSWORD_ERROR","PASSWORD_HIT_SETTING_ERROR","WRONG_PASSWORD_ERROR","MOSAIC_NAME_NULL_ERROR","QR_GENERATION_ERROR","ADDRESS_FORMAT_ERROR","AMOUNT_LESS_THAN_0_ERROR","FEE_LESS_THAN_0_ERROR","SUPPLY_LESS_THAN_0_ERROR","DIVISIBILITY_LESS_THAN_0_ERROR","DURATION_LESS_THAN_0_ERROR","DURATION_MORE_THAN_1_YEARS_ERROR","DURATION_MORE_THAN_10_YEARS_ERROR","MNEMONIC_INCONSISTENCY_ERROR","PASSWORD_SETTING_INPUT_ERROR","MNENOMIC_INPUT_ERROR","OPERATION_FAILED_ERROR","NODE_NULL_ERROR","INPUT_EMPTY_ERROR","CO_SIGNER_NULL_ERROR","MIN_APPROVAL_LESS_THAN_0_ERROR","MIN_REMOVAL_LESS_THAN_0_ERROR","MAX_APPROVAL_MORE_THAN_10_ERROR","MAX_REMOVAL_MORE_THAN_10_ERROR","ILLEGAL_PUBLICKEY_ERROR","ILLEGAL_MIN_APPROVAL_ERROR","ILLEGAL_MIN_REMOVAL_ERROR","MOSAIC_ID_FORMAT_ERROR","ALIAS_NAME_FORMAT_ERROR","DURATION_VALUE_LESS_THAN_1_ERROR","NAMESPACE_NULL_ERROR","ROOT_NAMESPACE_TOO_LONG_ERROR","NAMESPACE_STARTING_ERROR","NAMESPACE_FORMAT_ERROR","NAMESPACE_USE_BANDED_WORD_ERROR","SUB_NAMESPACE_LENGTH_LONGER_THAN_64_ERROR"],"mappings":"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","file":"static/js/chunk-65fa3afe.58683a51.js","sourcesContent":["'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * Enumeration `CurveAlgorithm` lists supported ellyptic curve algorithms\n * for curve points derivation.\n *\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.2.0\n */\nvar CurveAlgorithm;\n(function (CurveAlgorithm) {\n    CurveAlgorithm[CurveAlgorithm[\"secp256k1\"] = 0] = \"secp256k1\";\n    CurveAlgorithm[CurveAlgorithm[\"ed25519\"] = 1] = \"ed25519\";\n})(CurveAlgorithm = exports.CurveAlgorithm || (exports.CurveAlgorithm = {}));\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst bip32 = __importStar(require(\"bip32\"));\nconst bs58check = require('bs58check');\n// internal dependencies\nconst index_1 = require(\"../index\");\n/**\n * Class `ExtendedKey` describes a hierarchical deterministic extended\n * key that can be derived. This hierarchical deterministic child key\n * derivation feature is described in the Bitcoin BIP32 standard which\n * can be found at following URL:\n *\n *     https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n *\n * This class *uses* features provided by the `bitcoinjs/bip32` package\n * and therefor is licensed under the BSD-2 Clause License as mentioned\n * [here](https://github.com/bitcoinjs/bip32/blob/master/LICENSE).\n *\n * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n * @see https://github.com/bitcoinjs/bip32\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.1.0\n */\nclass ExtendedKey {\n    /**\n     * Construct an `ExtendedKey` object out of its' base58 payload.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/ts-src/bip32.ts\n     * @param   node   {BIP32}\n     */\n    constructor(/**\n                 * The hyper-deterministic node.\n                 * @var {BIP32 | NodeEd25519}\n                 */ node, \n    /**\n     * The hyper-deterministic node network.\n     * @var {Network}\n     */\n    network = index_1.Network.BITCOIN, \n    /**\n     * The Message Authentication Code type to use.\n     * Possible values include HMAC and KMAC.\n     * @var {MACType}\n     */\n    macType = index_1.MACType.HMAC) {\n        this.node = node;\n        this.network = network;\n        this.macType = macType;\n        if (this.node instanceof index_1.NodeEd25519\n            && this.network !== index_1.Network.CATAPULT) {\n            throw new Error('Given node is of type NodeEd25519 but network does not match Network.CATAPULT.');\n        }\n        // } else if (this.node instanceof nist256p1) { ..\n        else if (!(this.node instanceof index_1.NodeEd25519)\n            && this.network !== index_1.Network.BITCOIN) {\n            throw new Error('Given node is of type BIP32 but network does not match Network.BITCOIN.');\n        }\n    }\n    /**\n     * Create an extended key hyper-deterministic node by its' Base58\n     * payload.\n     *\n     * This method uses the `bitcoinjs/bip32` function named `fromBase58`\n     * and creates an extended key node by parsing the Base58 binary\n     * representation.\n     *\n     * @param payload\n     */\n    static createFromBase58(payload, network = index_1.Network.BITCOIN, macType = index_1.MACType.HMAC) {\n        if (network === index_1.Network.CATAPULT) {\n            // use NodeEd25519 node implementation\n            // interpret payload\n            const node = index_1.NodeEd25519.fromBase58(payload);\n            // instanciate our ExtendedKey\n            return new ExtendedKey(node, network, macType);\n        }\n        // else {\n        // use BIP32 node implementation\n        // interpret payload\n        const node = bip32.fromBase58(payload);\n        // instanciate our ExtendedKey\n        return new ExtendedKey(node, network, macType);\n    }\n    /**\n     * Create an extended key hyper-deterministic node with the master\n     * seed.\n     *\n     * This method uses the `bitcoinjs/bip32` function named `fromSeed`\n     * and creates an extended key node by creating HMAC-SHA512 hash\n     * of the words 'Bitcoin seed' appended with the `seed` binary\n     * representation.\n     *\n     * The result is split in 2 parts where the left most 32 bytes are\n     * the private and right most 32 bytes are the public key.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/src/bip32.js#L265\n     * @param   seed    {string}\n     * @param   network {Network}\n     * @return  {ExtendedKey}\n     */\n    static createFromSeed(seed, network = index_1.Network.BITCOIN, macType = index_1.MACType.HMAC) {\n        if (network === index_1.Network.CATAPULT) {\n            // use NodeEd25519 node implementation\n            // use hexadecimal seed\n            const node = index_1.NodeEd25519.fromSeed(Buffer.from(seed, 'hex'), index_1.Network.CATAPULT, macType);\n            // instanciate our ExtendedKey\n            return new ExtendedKey(node, network, macType);\n        }\n        // else {\n        // use BIP32 node implementation\n        // use hexadecimal seed\n        const node = bip32.fromSeed(Buffer.from(seed, 'hex'));\n        // instanciate our ExtendedKey\n        return new ExtendedKey(node, network, macType);\n    }\n    /**\n     * Derive hyper-deterministic node by `path`.\n     *\n     * Default account layer should derive path `m/44'/43'/0'/0/0`.\n     *\n     * @see https://github.com/nemtech/NIP/issues/12\n     * @param path\n     */\n    derivePath(path) {\n        // derive path with specialized `derivePath`\n        const derived = this.node.derivePath(path);\n        if (derived instanceof index_1.NodeEd25519) {\n            // use NodeEd25519 node implementation\n            return new ExtendedKey(derived, this.network, this.macType);\n        }\n        // else {\n        // use BIP32 node implementation\n        return new ExtendedKey(derived, this.network, this.macType);\n    }\n    /**\n     * Return whether an extended key node is neutered or not.\n     *\n     * Neutered = Public Key only\n     * Not Neutered = Private Key available\n     *\n     * @return {boolean}\n     */\n    isNeutered() {\n        // forward to `bitcoinjs/bip32`\n        return this.node.isNeutered();\n    }\n    /**\n     * Return whether the current `node` is a master key node or not.\n     *\n     * @return {boolean}\n     */\n    isMaster() {\n        //XXX read parentFingerprint instead of decode\n        const base58 = this.node.toBase58();\n        const buffer = bs58check.decode(base58);\n        const parent = buffer.readUInt32BE(5);\n        return parent === 0x00000000;\n    }\n    /**\n     * Get a neutered hyper-deterministic node. This corresponds to\n     * a public key only extended key.\n     *\n     * From a neutered HD-node, users can only generate **public child\n     * keys** and no **private child keys**.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/ts-src/bip32.ts#L118\n     * @return {ExtendedKey}    The neutered HD-node\n     */\n    getPublicNode() {\n        // create new node from neutered\n        const node = this.node.neutered();\n        if (node instanceof index_1.NodeEd25519) {\n            // use NodeEd25519 node implementation\n            return new ExtendedKey(node, this.network, this.macType);\n        }\n        // else {\n        // use BIP32 node implementation\n        return new ExtendedKey(node, this.network, this.macType);\n    }\n    /**\n     * This method proxies the conversion to base58 format\n     * to the `bitcoinjs/bip32` library.\n     *\n     * @return {string}\n     */\n    toBase58() {\n        // forward to `bitcoinjs/bip32`\n        return this.node.toBase58();\n    }\n    /**\n     * Get the private key of the HD-node.\n     *\n     * This method defaults to returning the hexadecimal notation of\n     * the key. Use `KeyEncoding.ENC_BIN` if you need the binary form.\n     *\n     * @see {KeyEncoding}\n     * @return  {string}\n     * @throws  {Error}     On use of this method with neutered extended keys (public keys).\n     */\n    getPrivateKey(encoding = index_1.KeyEncoding.ENC_HEX) {\n        if (this.isNeutered()) {\n            throw new Error('Cannot read private key out of extended public key.');\n        }\n        // return encoded private key (default hexadecimal format)\n        return this.encodeAs(this.node.privateKey, encoding);\n    }\n    /**\n     * Get the public key in hexadecimal notation.\n     *\n     * This method defaults to returning the hexadecimal notation of\n     * the key. Use `KeyEncoding.ENC_BIN` if you need the binary form.\n     *\n     * @see {KeyEncoding}\n     * @return  {string}\n     * @throws  {Error}     On use of this method with neutered extended keys (public keys).\n     */\n    getPublicKey(encoding = index_1.KeyEncoding.ENC_HEX) {\n        // @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n        // ser-p(P) serializes the coordinate and prepends either 0x02 or 0x03 to it.\n        // drop first byte for 32-bytes public key\n        let publicKey = this.node.publicKey;\n        if (this.node.publicKey.byteLength === 33) {\n            publicKey = this.node.publicKey.slice(1);\n        }\n        // return encoded public key (default hexadecimal format)\n        return this.encodeAs(publicKey, encoding);\n    }\n    /**\n     * Encode a key into `encoding`. Default `encoding` is `KeyEncoding.ENC_HEX`\n     * which results in a hexadecimal notation of the key.\n     *\n     * @param key\n     * @param encoding\n     */\n    encodeAs(key, encoding = index_1.KeyEncoding.ENC_HEX) {\n        if (encoding === index_1.KeyEncoding.ENC_HEX) {\n            // return hexadecimal notation\n            return key.toString('hex');\n        }\n        // return binary Buffer\n        return key;\n    }\n}\n/**\n * Static property to define which type of\n * message authentication code must be used.\n *\n * @var {MACType}\n */\nExtendedKey.DEFAULT_MAC_TYPE = index_1.MACType.HMAC;\nexports.ExtendedKey = ExtendedKey;\n","var NATIVE = require('./native')\nvar ERRORS = require('./errors')\n\nfunction _Buffer (value) {\n  return Buffer.isBuffer(value)\n}\n\nfunction Hex (value) {\n  return typeof value === 'string' && /^([0-9a-f]{2})+$/i.test(value)\n}\n\nfunction _LengthN (type, length) {\n  var name = type.toJSON()\n\n  function Length (value) {\n    if (!type(value)) return false\n    if (value.length === length) return true\n\n    throw ERRORS.tfCustomError(name + '(Length: ' + length + ')', name + '(Length: ' + value.length + ')')\n  }\n  Length.toJSON = function () { return name }\n\n  return Length\n}\n\nvar _ArrayN = _LengthN.bind(null, NATIVE.Array)\nvar _BufferN = _LengthN.bind(null, _Buffer)\nvar _HexN = _LengthN.bind(null, Hex)\nvar _StringN = _LengthN.bind(null, NATIVE.String)\n\nfunction Range (a, b, f) {\n  f = f || NATIVE.Number\n  function _range (value, strict) {\n    return f(value, strict) && (value > a) && (value < b)\n  }\n  _range.toJSON = function () {\n    return `${f.toJSON()} between [${a}, ${b}]`\n  }\n  return _range\n}\n\nvar INT53_MAX = Math.pow(2, 53) - 1\n\nfunction Finite (value) {\n  return typeof value === 'number' && isFinite(value)\n}\nfunction Int8 (value) { return ((value << 24) >> 24) === value }\nfunction Int16 (value) { return ((value << 16) >> 16) === value }\nfunction Int32 (value) { return (value | 0) === value }\nfunction Int53 (value) {\n  return typeof value === 'number' &&\n    value >= -INT53_MAX &&\n    value <= INT53_MAX &&\n    Math.floor(value) === value\n}\nfunction UInt8 (value) { return (value & 0xff) === value }\nfunction UInt16 (value) { return (value & 0xffff) === value }\nfunction UInt32 (value) { return (value >>> 0) === value }\nfunction UInt53 (value) {\n  return typeof value === 'number' &&\n    value >= 0 &&\n    value <= INT53_MAX &&\n    Math.floor(value) === value\n}\n\nvar types = {\n  ArrayN: _ArrayN,\n  Buffer: _Buffer,\n  BufferN: _BufferN,\n  Finite: Finite,\n  Hex: Hex,\n  HexN: _HexN,\n  Int8: Int8,\n  Int16: Int16,\n  Int32: Int32,\n  Int53: Int53,\n  Range: Range,\n  StringN: _StringN,\n  UInt8: UInt8,\n  UInt16: UInt16,\n  UInt32: UInt32,\n  UInt53: UInt53\n}\n\nfor (var typeName in types) {\n  types[typeName].toJSON = function (t) {\n    return t\n  }.bind(null, typeName)\n}\n\nmodule.exports = types\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst createHash = require(\"create-hash\");\nconst pbkdf2_1 = require(\"pbkdf2\");\nconst randomBytes = require(\"randombytes\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please explicitly pass a 2048 word array explicitly.';\nfunction lpad(str, padString, length) {\n    while (str.length < length)\n        str = padString + str;\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map(x => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = createHash('sha256')\n        .update(entropyBuffer)\n        .digest();\n    return bytesToBinary([...hash]).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n    const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n    return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    return new Promise((resolve, reject) => {\n        try {\n            const mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n            const saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n            pbkdf2_1.pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', (err, data) => {\n                if (err)\n                    return reject(err);\n                else\n                    return resolve(data);\n            });\n        }\n        catch (error) {\n            return reject(error);\n        }\n    });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = (mnemonic || '').normalize('NFKD').split(' ');\n    if (words.length % 3 !== 0)\n        throw new Error(INVALID_MNEMONIC);\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map(word => {\n        const index = wordlist.indexOf(word);\n        if (index === -1)\n            throw new Error(INVALID_MNEMONIC);\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length > 32)\n        throw new Error(INVALID_ENTROPY);\n    if (entropyBytes.length % 4 !== 0)\n        throw new Error(INVALID_ENTROPY);\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits)\n        throw new Error(INVALID_CHECKSUM);\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy))\n        entropy = Buffer.from(entropy, 'hex');\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length > 32)\n        throw new TypeError(INVALID_ENTROPY);\n    if (entropy.length % 4 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    const entropyBits = bytesToBinary([...entropy]);\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map(binary => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0)\n        throw new TypeError(INVALID_ENTROPY);\n    rng = rng || randomBytes;\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result)\n        DEFAULT_WORDLIST = result;\n    else\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST)\n        throw new Error('No Default Wordlist set');\n    return Object.keys(_wordlists_1.wordlists).filter(lang => {\n        if (lang === 'JA' || lang === 'EN')\n            return false;\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n","const BN = require('bn.js')\nconst EC = require('elliptic').ec\nconst secp256k1 = new EC('secp256k1')\nconst deterministicGenerateK = require('./rfc6979')\n\nconst ZERO32 = Buffer.alloc(32, 0)\nconst EC_GROUP_ORDER = Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex')\nconst EC_P = Buffer.from('fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f', 'hex')\n\nconst n = secp256k1.curve.n\nconst nDiv2 = n.shrn(1)\nconst G = secp256k1.curve.g\n\nconst THROW_BAD_PRIVATE = 'Expected Private'\nconst THROW_BAD_POINT = 'Expected Point'\nconst THROW_BAD_TWEAK = 'Expected Tweak'\nconst THROW_BAD_HASH = 'Expected Hash'\nconst THROW_BAD_SIGNATURE = 'Expected Signature'\nconst THROW_BAD_EXTRA_DATA = 'Expected Extra Data (32 bytes)'\n\nfunction isScalar (x) {\n  return Buffer.isBuffer(x) && x.length === 32\n}\n\nfunction isOrderScalar (x) {\n  if (!isScalar(x)) return false\n  return x.compare(EC_GROUP_ORDER) < 0 // < G\n}\n\nfunction isPoint (p) {\n  if (!Buffer.isBuffer(p)) return false\n  if (p.length < 33) return false\n\n  const t = p[0]\n  const x = p.slice(1, 33)\n  if (x.compare(ZERO32) === 0) return false\n  if (x.compare(EC_P) >= 0) return false\n  if ((t === 0x02 || t === 0x03) && p.length === 33) {\n    try { decodeFrom(p) } catch (e) { return false } // TODO: temporary\n    return true\n  }\n\n  const y = p.slice(33)\n  if (y.compare(ZERO32) === 0) return false\n  if (y.compare(EC_P) >= 0) return false\n  if (t === 0x04 && p.length === 65) return true\n  return false\n}\n\nfunction __isPointCompressed (p) {\n  return p[0] !== 0x04\n}\n\nfunction isPointCompressed (p) {\n  if (!isPoint(p)) return false\n  return __isPointCompressed(p)\n}\n\nfunction isPrivate (x) {\n  if (!isScalar(x)) return false\n  return x.compare(ZERO32) > 0 && // > 0\n    x.compare(EC_GROUP_ORDER) < 0 // < G\n}\n\nfunction isSignature (value) {\n  const r = value.slice(0, 32)\n  const s = value.slice(32, 64)\n  return Buffer.isBuffer(value) && value.length === 64 &&\n    r.compare(EC_GROUP_ORDER) < 0 &&\n    s.compare(EC_GROUP_ORDER) < 0\n}\n\nfunction assumeCompression (value, pubkey) {\n  if (value === undefined && pubkey !== undefined) return __isPointCompressed(pubkey)\n  if (value === undefined) return true\n  return value\n}\n\nfunction fromBuffer (d) { return new BN(d) }\nfunction toBuffer (d) { return d.toArrayLike(Buffer, 'be', 32) }\nfunction decodeFrom (P) { return secp256k1.curve.decodePoint(P) }\nfunction getEncoded (P, compressed) { return Buffer.from(P._encode(compressed)) }\n\nfunction pointAdd (pA, pB, __compressed) {\n  if (!isPoint(pA)) throw new TypeError(THROW_BAD_POINT)\n  if (!isPoint(pB)) throw new TypeError(THROW_BAD_POINT)\n\n  const a = decodeFrom(pA)\n  const b = decodeFrom(pB)\n  const pp = a.add(b)\n  if (pp.isInfinity()) return null\n\n  const compressed = assumeCompression(__compressed, pA)\n  return getEncoded(pp, compressed)\n}\n\nfunction pointAddScalar (p, tweak, __compressed) {\n  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT)\n  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK)\n\n  const compressed = assumeCompression(__compressed, p)\n  const pp = decodeFrom(p)\n  if (tweak.compare(ZERO32) === 0) return getEncoded(pp, compressed)\n\n  const tt = fromBuffer(tweak)\n  const qq = G.mul(tt)\n  const uu = pp.add(qq)\n  if (uu.isInfinity()) return null\n\n  return getEncoded(uu, compressed)\n}\n\nfunction pointCompress (p, compressed) {\n  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT)\n\n  const pp = decodeFrom(p)\n  if (pp.isInfinity()) throw new TypeError(THROW_BAD_POINT)\n\n  return getEncoded(pp, compressed)\n}\n\nfunction pointFromScalar (d, __compressed) {\n  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE)\n\n  const dd = fromBuffer(d)\n  const pp = G.mul(dd)\n  if (pp.isInfinity()) return null\n\n  const compressed = assumeCompression(__compressed)\n  return getEncoded(pp, compressed)\n}\n\nfunction pointMultiply (p, tweak, __compressed) {\n  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT)\n  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK)\n\n  const compressed = assumeCompression(__compressed, p)\n  const pp = decodeFrom(p)\n  const tt = fromBuffer(tweak)\n  const qq = pp.mul(tt)\n  if (qq.isInfinity()) return null\n\n  return getEncoded(qq, compressed)\n}\n\nfunction privateAdd (d, tweak) {\n  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE)\n  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK)\n\n  const dd = fromBuffer(d)\n  const tt = fromBuffer(tweak)\n  const dt = toBuffer(dd.add(tt).umod(n))\n  if (!isPrivate(dt)) return null\n\n  return dt\n}\n\nfunction privateSub (d, tweak) {\n  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE)\n  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK)\n\n  const dd = fromBuffer(d)\n  const tt = fromBuffer(tweak)\n  const dt = toBuffer(dd.sub(tt).umod(n))\n  if (!isPrivate(dt)) return null\n\n  return dt\n}\n\nfunction sign (hash, x) {\n  return __sign(hash, x)\n}\n\nfunction signWithEntropy (hash, x, addData) {\n  return __sign(hash, x, addData)\n}\n\nfunction __sign (hash, x, addData) {\n  if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH)\n  if (!isPrivate(x)) throw new TypeError(THROW_BAD_PRIVATE)\n  if (addData !== undefined && !isScalar(addData)) throw new TypeError(THROW_BAD_EXTRA_DATA)\n\n  const d = fromBuffer(x)\n  const e = fromBuffer(hash)\n\n  let r, s\n  const checkSig = function (k) {\n    const kI = fromBuffer(k)\n    const Q = G.mul(kI)\n\n    if (Q.isInfinity()) return false\n\n    r = Q.x.umod(n)\n    if (r.isZero() === 0) return false\n\n    s = kI\n      .invm(n)\n      .mul(e.add(d.mul(r)))\n      .umod(n)\n    if (s.isZero() === 0) return false\n\n    return true\n  }\n\n  deterministicGenerateK(hash, x, checkSig, isPrivate, addData)\n\n  // enforce low S values, see bip62: 'low s values in signatures'\n  if (s.cmp(nDiv2) > 0) {\n    s = n.sub(s)\n  }\n\n  const buffer = Buffer.allocUnsafe(64)\n  toBuffer(r).copy(buffer, 0)\n  toBuffer(s).copy(buffer, 32)\n  return buffer\n}\n\nfunction verify (hash, q, signature) {\n  if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH)\n  if (!isPoint(q)) throw new TypeError(THROW_BAD_POINT)\n\n  // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (1, isSignature enforces '< n - 1')\n  if (!isSignature(signature)) throw new TypeError(THROW_BAD_SIGNATURE)\n\n  const Q = decodeFrom(q)\n  const r = fromBuffer(signature.slice(0, 32))\n  const s = fromBuffer(signature.slice(32, 64))\n\n  // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (2, enforces '> 0')\n  if (r.gtn(0) <= 0 /* || r.compareTo(n) >= 0 */) return false\n  if (s.gtn(0) <= 0 /* || s.compareTo(n) >= 0 */) return false\n\n  // 1.4.2 H = Hash(M), already done by the user\n  // 1.4.3 e = H\n  const e = fromBuffer(hash)\n\n  // Compute s^-1\n  const sInv = s.invm(n)\n\n  // 1.4.4 Compute u1 = es^−1 mod n\n  //               u2 = rs^−1 mod n\n  const u1 = e.mul(sInv).umod(n)\n  const u2 = r.mul(sInv).umod(n)\n\n  // 1.4.5 Compute R = (xR, yR)\n  //               R = u1G + u2Q\n  const R = G.mulAdd(u1, Q, u2)\n\n  // 1.4.5 (cont.) Enforce R is not at infinity\n  if (R.isInfinity()) return false\n\n  // 1.4.6 Convert the field element R.x to an integer\n  const xR = R.x\n\n  // 1.4.7 Set v = xR mod n\n  const v = xR.umod(n)\n\n  // 1.4.8 If v = r, output \"valid\", and if v != r, output \"invalid\"\n  return v.eq(r)\n}\n\nmodule.exports = {\n  isPoint,\n  isPointCompressed,\n  isPrivate,\n  pointAdd,\n  pointAddScalar,\n  pointCompress,\n  pointFromScalar,\n  pointMultiply,\n  privateAdd,\n  privateSub,\n  sign,\n  signWithEntropy,\n  verify\n}\n","let Buffer = require('safe-buffer').Buffer\nlet bs58check = require('bs58check')\nlet crypto = require('./crypto')\nlet ecc = require('tiny-secp256k1')\nlet typeforce = require('typeforce')\nlet wif = require('wif')\n\nlet UINT256_TYPE = typeforce.BufferN(32)\nlet NETWORK_TYPE = typeforce.compile({\n  wif: typeforce.UInt8,\n  bip32: {\n    public: typeforce.UInt32,\n    private: typeforce.UInt32\n  }\n})\n\nlet BITCOIN = {\n  wif: 0x80,\n  bip32: {\n    public: 0x0488b21e,\n    private: 0x0488ade4\n  }\n}\n\nfunction BIP32 (d, Q, chainCode, network) {\n  typeforce(NETWORK_TYPE, network)\n\n  this.__d = d || null\n  this.__Q = Q || null\n\n  this.chainCode = chainCode\n  this.depth = 0\n  this.index = 0\n  this.network = network\n  this.parentFingerprint = 0x00000000\n}\n\nObject.defineProperty(BIP32.prototype, 'identifier', { get: function () { return crypto.hash160(this.publicKey) } })\nObject.defineProperty(BIP32.prototype, 'fingerprint', { get: function () { return this.identifier.slice(0, 4) } })\nObject.defineProperty(BIP32.prototype, 'privateKey', {\n  enumerable: false,\n  get: function () { return this.__d }\n})\nObject.defineProperty(BIP32.prototype, 'publicKey', { get: function () {\n  if (!this.__Q) this.__Q = ecc.pointFromScalar(this.__d, this.compressed)\n  return this.__Q\n}})\n\n// Private === not neutered\n// Public === neutered\nBIP32.prototype.isNeutered = function () {\n  return this.__d === null\n}\n\nBIP32.prototype.neutered = function () {\n  let neutered = fromPublicKey(this.publicKey, this.chainCode, this.network)\n  neutered.depth = this.depth\n  neutered.index = this.index\n  neutered.parentFingerprint = this.parentFingerprint\n  return neutered\n}\n\nBIP32.prototype.toBase58 = function () {\n  let network = this.network\n  let version = (!this.isNeutered()) ? network.bip32.private : network.bip32.public\n  let buffer = Buffer.allocUnsafe(78)\n\n  // 4 bytes: version bytes\n  buffer.writeUInt32BE(version, 0)\n\n  // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....\n  buffer.writeUInt8(this.depth, 4)\n\n  // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n  buffer.writeUInt32BE(this.parentFingerprint, 5)\n\n  // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n  // This is encoded in big endian. (0x00000000 if master key)\n  buffer.writeUInt32BE(this.index, 9)\n\n  // 32 bytes: the chain code\n  this.chainCode.copy(buffer, 13)\n\n  // 33 bytes: the public key or private key data\n  if (!this.isNeutered()) {\n    // 0x00 + k for private keys\n    buffer.writeUInt8(0, 45)\n    this.privateKey.copy(buffer, 46)\n\n  // 33 bytes: the public key\n  } else {\n    // X9.62 encoding for public keys\n    this.publicKey.copy(buffer, 45)\n  }\n\n  return bs58check.encode(buffer)\n}\n\nBIP32.prototype.toWIF = function () {\n  if (!this.privateKey) throw new TypeError('Missing private key')\n  return wif.encode(this.network.wif, this.privateKey, true)\n}\n\nlet HIGHEST_BIT = 0x80000000\n\n// https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions\nBIP32.prototype.derive = function (index) {\n  typeforce(typeforce.UInt32, index)\n\n  let isHardened = index >= HIGHEST_BIT\n  let data = Buffer.allocUnsafe(37)\n\n  // Hardened child\n  if (isHardened) {\n    if (this.isNeutered()) throw new TypeError('Missing private key for hardened child key')\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data[0] = 0x00\n    this.privateKey.copy(data, 1)\n    data.writeUInt32BE(index, 33)\n\n  // Normal child\n  } else {\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    this.publicKey.copy(data, 0)\n    data.writeUInt32BE(index, 33)\n  }\n\n  let I = crypto.hmacSHA512(this.chainCode, data)\n  let IL = I.slice(0, 32)\n  let IR = I.slice(32)\n\n  // if parse256(IL) >= n, proceed with the next value for i\n  if (!ecc.isPrivate(IL)) return this.derive(index + 1)\n\n  // Private parent key -> private child key\n  let hd\n  if (!this.isNeutered()) {\n    // ki = parse256(IL) + kpar (mod n)\n    let ki = ecc.privateAdd(this.privateKey, IL)\n\n    // In case ki == 0, proceed with the next value for i\n    if (ki == null) return this.derive(index + 1)\n\n    hd = fromPrivateKey(ki, IR, this.network)\n\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    let Ki = ecc.pointAddScalar(this.publicKey, IL, true)\n\n    // In case Ki is the point at infinity, proceed with the next value for i\n    if (Ki === null) return this.derive(index + 1)\n\n    hd = fromPublicKey(Ki, IR, this.network)\n  }\n\n  hd.depth = this.depth + 1\n  hd.index = index\n  hd.parentFingerprint = this.fingerprint.readUInt32BE(0)\n  return hd\n}\n\nlet UINT31_MAX = Math.pow(2, 31) - 1\nfunction UInt31 (value) {\n  return typeforce.UInt32(value) && value <= UINT31_MAX\n}\n\nBIP32.prototype.deriveHardened = function (index) {\n  typeforce(UInt31, index)\n\n  // Only derives hardened private keys by default\n  return this.derive(index + HIGHEST_BIT)\n}\n\nfunction BIP32Path (value) {\n  return typeforce.String(value) && value.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/)\n}\n\nBIP32.prototype.derivePath = function (path) {\n  typeforce(BIP32Path, path)\n\n  let splitPath = path.split('/')\n  if (splitPath[0] === 'm') {\n    if (this.parentFingerprint) throw new TypeError('Expected master, got child')\n\n    splitPath = splitPath.slice(1)\n  }\n\n  return splitPath.reduce(function (prevHd, indexStr) {\n    let index\n    if (indexStr.slice(-1) === \"'\") {\n      index = parseInt(indexStr.slice(0, -1), 10)\n      return prevHd.deriveHardened(index)\n    } else {\n      index = parseInt(indexStr, 10)\n      return prevHd.derive(index)\n    }\n  }, this)\n}\n\nBIP32.prototype.sign = function (hash) {\n  return ecc.sign(hash, this.privateKey)\n}\n\nBIP32.prototype.verify = function (hash, signature) {\n  return ecc.verify(hash, this.publicKey, signature)\n}\n\nfunction fromBase58 (string, network) {\n  let buffer = bs58check.decode(string)\n  if (buffer.length !== 78) throw new TypeError('Invalid buffer length')\n  network = network || BITCOIN\n\n  // 4 bytes: version bytes\n  let version = buffer.readUInt32BE(0)\n  if (version !== network.bip32.private &&\n    version !== network.bip32.public) throw new TypeError('Invalid network version')\n\n  // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...\n  let depth = buffer[4]\n\n  // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n  let parentFingerprint = buffer.readUInt32BE(5)\n  if (depth === 0) {\n    if (parentFingerprint !== 0x00000000) throw new TypeError('Invalid parent fingerprint')\n  }\n\n  // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n  // This is encoded in MSB order. (0x00000000 if master key)\n  let index = buffer.readUInt32BE(9)\n  if (depth === 0 && index !== 0) throw new TypeError('Invalid index')\n\n  // 32 bytes: the chain code\n  let chainCode = buffer.slice(13, 45)\n  let hd\n\n  // 33 bytes: private key data (0x00 + k)\n  if (version === network.bip32.private) {\n    if (buffer.readUInt8(45) !== 0x00) throw new TypeError('Invalid private key')\n    let k = buffer.slice(46, 78)\n\n    hd = fromPrivateKey(k, chainCode, network)\n\n  // 33 bytes: public key data (0x02 + X or 0x03 + X)\n  } else {\n    let X = buffer.slice(45, 78)\n\n    hd = fromPublicKey(X, chainCode, network)\n  }\n\n  hd.depth = depth\n  hd.index = index\n  hd.parentFingerprint = parentFingerprint\n  return hd\n}\n\nfunction fromPrivateKey (privateKey, chainCode, network) {\n  typeforce({\n    privateKey: UINT256_TYPE,\n    chainCode: UINT256_TYPE\n  }, { privateKey, chainCode })\n  network = network || BITCOIN\n\n  if (!ecc.isPrivate(privateKey)) throw new TypeError('Private key not in range [1, n)')\n  return new BIP32(privateKey, null, chainCode, network)\n}\n\nfunction fromPublicKey (publicKey, chainCode, network) {\n  typeforce({\n    publicKey: typeforce.BufferN(33),\n    chainCode: UINT256_TYPE\n  }, { publicKey, chainCode })\n  network = network || BITCOIN\n\n  // verify the X coordinate is a point on the curve\n  if (!ecc.isPoint(publicKey)) throw new TypeError('Point is not on the curve')\n  return new BIP32(null, publicKey, chainCode, network)\n}\n\nfunction fromSeed (seed, network) {\n  typeforce(typeforce.Buffer, seed)\n  if (seed.length < 16) throw new TypeError('Seed should be at least 128 bits')\n  if (seed.length > 64) throw new TypeError('Seed should be at most 512 bits')\n  network = network || BITCOIN\n\n  let I = crypto.hmacSHA512('Bitcoin seed', seed)\n  let IL = I.slice(0, 32)\n  let IR = I.slice(32)\n\n  return fromPrivateKey(IL, IR, network)\n}\n\nmodule.exports = {\n  fromBase58,\n  fromPrivateKey,\n  fromPublicKey,\n  fromSeed\n}\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst bip39 = __importStar(require(\"bip39\"));\nconst nem2_sdk_1 = require(\"nem2-sdk\");\n/**\n * Class `MnemonicPassPhrase` describes a mnemonic pass phrase generator\n * as defined by the Bitcoin BIP39 standard which can be found at following\n * URL:\n *\n *     https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n *\n * This class *uses* features provided by the `bitcoinjs/bip39` package\n * and therefor is licensed under the BSD-2 Clause License as mentioned\n * [here](https://github.com/bitcoinjs/bip39/blob/master/LICENSE).\n *\n * @see https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n * @see https://github.com/bitcoinjs/bip39\n * @since 0.1.0\n */\nclass MnemonicPassPhrase {\n    /**\n     * Create a `MnemonicPassPhrase` instance.\n     *\n     * @param plain {string}\n     */\n    constructor(/**\n                        * The mnemonic pass phrase (plain text).\n                        * @var {string}\n                        */ plain) {\n        this.plain = plain;\n    }\n    /**\n     * Create a random mnemonic pass phrase. Arguments to this method are\n     * all optional, default values are static variables of this class.\n     *\n     * This static method returns a sentence built following the Bitcoin\n     * BIP39 standard using the `bitcoinjs/bip39` library.\n     *\n     * @todo `strength` replace by `countWords` for higher level approach\n     *\n     * @param   language    {string}    (Optional) The language used for the wordlist.\n     * @param   strength    {number}    (Optional) Strength of mnemonic pass phrase (% 32 == 0).\n     * @param   rng         {function}  (Optional) Random Number Generator to be used.\n     * @return  {string}    Returns the mnemonic pass phrase in plain text format.\n     * @throws  {Error}     On unsupported `language` argument.\n     */\n    static createRandom(language = MnemonicPassPhrase.DEFAULT_LANGUAGE, strength = MnemonicPassPhrase.DEFAULT_STRENGTH, rng = MnemonicPassPhrase.CATAPULT_RNG) {\n        // check if `language` is supported or throw\n        MnemonicPassPhrase.assertLanguageSupported(language);\n        // check if `strength` is BIP39 compliant\n        if (strength % 32 !== 0 || strength < 128 || strength > 256) {\n            throw new Error('Invalid strength, must be multiple of 32 with: 128 >= strength <= 256.');\n        }\n        // set active wordlist by language\n        if (language !== MnemonicPassPhrase.DEFAULT_LANGUAGE) {\n            bip39.setDefaultWordlist(language);\n        }\n        return new MnemonicPassPhrase(bip39.generateMnemonic(strength, rng));\n    }\n    /**\n     * Convert an entropy value to a mnemonic pass phrase in plain text.\n     *\n     * If the `language` argument is ommited, the default\n     * language 'english' will be used.\n     *\n     * The `bitcoinjs/bip39` package's `entropyToMnemonic` function\n     * validates the entropy value by parsing it, then builds the mnemonic\n     * pass phrase by retrieving and joining words from the wordlist.\n     *\n     * @param   mnemonic    {string}    The mnemonic pass phrase to validate.\n     * @param   language    {string}    (Optional) The language used for the wordlist.\n     * @return  {string}    Returns the mnemonic pass phrase in plain text format.\n     * @throws  {Error}     On unsupported `language` argument.\n     */\n    static createFromEntropy(entropy, language = MnemonicPassPhrase.DEFAULT_LANGUAGE) {\n        // check if `language` is supported or throw\n        MnemonicPassPhrase.assertLanguageSupported(language);\n        return new MnemonicPassPhrase(bip39.entropyToMnemonic(entropy, bip39.wordlists[language]));\n    }\n    /**\n     * Assert whether `language` is a supported language string, or not.\n     *\n     * @internal\n     * @see https://github.com/bitcoinjs/bip39/tree/master/ts_src/wordlists\n     * @return  {boolean}   True for *supported languages*, never false.\n     * @throws  {Error}     On unsupported `language` argument.\n     */\n    static assertLanguageSupported(language) {\n        // check if `language` is supported or throw\n        if (!bip39.wordlists.hasOwnProperty(language)) {\n            throw new Error('Language \"' + language + '\" is not supported.');\n        }\n        return true;\n    }\n    /**\n     * Validate a mnemonic pass phrase with optional `language`.\n     *\n     * If the `language` argument is ommited, the default\n     * language 'english' will be used.\n     *\n     * The `bitcoinjs/bip39` package's `validateMnemonic` function\n     * checks the mnemonic pass phrase by internally converting\n     * to an entropy bytes array with `mnemonicToEntropy`.\n     *\n     * Validation steps include `size`, `checksum bits` and `checksum`\n     * validations.\n     *\n     * @param   mnemonic    {string}    The mnemonic pass phrase to validate.\n     * @param   language    {string}    (Optional) The language used for the wordlist.\n     * @return  {boolean}   True for *valid mnemonic*, False for *invalid mnemonic*.\n     * @throws  {Error}     On unsupported `language` argument.\n     */\n    isValid(language = MnemonicPassPhrase.DEFAULT_LANGUAGE) {\n        // check if `language` is supported or throw\n        MnemonicPassPhrase.assertLanguageSupported(language);\n        return bip39.validateMnemonic(this.plain, bip39.wordlists[language]);\n    }\n    /**\n     * Get the array representation for the mnemonic pass phrase.\n     *\n     * Words are split using a white-space character as a separator.\n     *\n     * @return  {string[]}  Array of plain text words\n     */\n    toArray() {\n        return this.plain.split(' ');\n    }\n    /**\n     * Convert a mnemonic to an **encrypted** hexadecimal seed.\n     *\n     * If the `password` argument is ommited, an empty password will be assumed.\n     *\n     * The `bitcoinjs/bip39` package's `mnemonicToSeedSync` function\n     * will first *normalize* the mnemonic pass phrase Buffer to\n     * [NFKD form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms).\n     * Afterwards the buffer will be *salted* with the `password` (or empty) prepend\n     * by the string 'mnemonic'.\n     * In its last step, the function will then use PBKDF2 to derivate the password-\n     * protected hexadecimal seed from the salted buffer.\n     *\n     * @see https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms\n     * @param   password    {string}\n     * @return  {Buffer}    Buffer containing bytes of the hexadecimal seed.\n     */\n    toSeed(password) {\n        return bip39.mnemonicToSeedSync(this.plain, password || '');\n    }\n    /**\n     * Converts a mnemonic to hexadecimal entropy (of `strength` bits).\n     *\n     * If the `language` argument is ommited, the default\n     * language 'english' will be used.\n     *\n     * The `bitcoinjs/bip39` package's `mnemonicToEntropy` function\n     * converts words into 11 bit binary strings, then validates the\n     * checksum and finally, returns the built entropy hexadecimal\n     * (of `strength` bits).\n     *\n     * It is not recommended to store the result of this function. Please,\n     * have a look at `mnemonicToSeed(m, pw)` instead.\n     *\n     * @see {MnemonicPassPhrase}#mnemonicToSeed\n     * @param   language    {string}    (Optional) The language used for the wordlist.\n     * @return  {string}    Returns the hexadecimal format of the entropy value.\n     * @throws  {Error}     On unsupported `language` argument.\n     */\n    toEntropy(language = MnemonicPassPhrase.DEFAULT_LANGUAGE) {\n        // check if `language` is supported or throw\n        MnemonicPassPhrase.assertLanguageSupported(language);\n        return bip39.mnemonicToEntropy(this.plain, bip39.wordlists[language]);\n    }\n}\n/**\n * Default wordlist language used.\n *\n * @see [List of Supported Languages](https://github.com/bitcoinjs/bip39/tree/master/ts_src/wordlists)\n * @var {string}\n */\nMnemonicPassPhrase.DEFAULT_LANGUAGE = 'english';\n/**\n * Default mnemonic strength.\n *\n * @see https://github.com/bitcoinjs/bip39/blob/master/ts_src/index.ts#L131\n * @see https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#generating-the-mnemonic\n * @var {number}\n */\nMnemonicPassPhrase.DEFAULT_STRENGTH = 256;\n/**\n * Random number generator using `nacl_catapult`.\n *\n * Implicit conversion to `Buffer` is needed to comply\n * with `bitcoinjs/bip39`.\n *\n * @param   bytes   {number}    Number of bytes to generate.\n * @return  {Buffer}\n */\nMnemonicPassPhrase.CATAPULT_RNG = (bytes) => {\n    return Buffer.from(nem2_sdk_1.Crypto.randomBytes(bytes).buffer);\n};\nexports.MnemonicPassPhrase = MnemonicPassPhrase;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// internal dependencies\nconst index_1 = require(\"../index\");\n/**\n * Enumeration `MACImpl` describes multiple message authentication\n * code implementations.\n *\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.3.0\n */\nclass MACImpl {\n    /**\n     * No-Construct\n     */\n    constructor() { }\n    /**\n     * Create a message authentication code with given `type`.\n     * This will use either of HMAC or KMAC code generation.\n     *\n     * @access public\n     * @param   type        {MACType}\n     * @param   key         {Buffer}\n     * @param   data        {Buffer}\n     * @param   publicSalt  {Buffer|undefined}  (Optional)\n     */\n    static create(type, key, data, publicSalt = undefined) {\n        if (index_1.MACType.KMAC === type) {\n            // use KMAC256\n            return index_1.Cryptography.KMAC(key, data, publicSalt);\n        }\n        // by default uses HMAC with SHA512\n        return index_1.Cryptography.HMAC(key, data);\n    }\n}\nexports.MACImpl = MACImpl;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * Enumeration `MACType` lists supported message authentication code\n * algorithms.\n *\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.3.0\n */\nvar MACType;\n(function (MACType) {\n    MACType[MACType[\"HMAC\"] = 0] = \"HMAC\";\n    MACType[MACType[\"KMAC\"] = 1] = \"KMAC\";\n})(MACType = exports.MACType || (exports.MACType = {}));\n","var types = {\n  Array: function (value) { return value !== null && value !== undefined && value.constructor === Array },\n  Boolean: function (value) { return typeof value === 'boolean' },\n  Function: function (value) { return typeof value === 'function' },\n  Nil: function (value) { return value === undefined || value === null },\n  Number: function (value) { return typeof value === 'number' },\n  Object: function (value) { return typeof value === 'object' },\n  String: function (value) { return typeof value === 'string' },\n  '': function () { return true }\n}\n\n// TODO: deprecate\ntypes.Null = types.Nil\n\nfor (var typeName in types) {\n  types[typeName].toJSON = function (t) {\n    return t\n  }.bind(null, typeName)\n}\n\nmodule.exports = types\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst nem2_sdk_1 = require(\"nem2-sdk\");\n// internal dependencies\nconst index_1 = require(\"../index\");\n/**\n * Class `Wallet` describes a hierarchical deterministic Wallet that\n * produces _Catapult-ED25519_-compatible accounts.\n *\n * This class provides with a bridge between BIP32-ED25519 compatible\n * key pairs and the nem2-sdk `Account` or `PublicAccount` objects.\n *\n * @example Usage of hierarchical deterministic wallets\n *\n * ```typescript\n * const xkey = ExtendedKey.createFromSeed('000102030405060708090a0b0c0d0e0f');\n * const wallet = new Wallet(xkey);\n *\n * // get master account\n * const masterAccount = wallet.getAccount();\n *\n * // get DEFAULT WALLET\n * const defaultWallet = wallet.getChildAccount();\n *\n * // derive specific child path\n * const childWallet = wallet.getChildAccount('m/44\\'/43\\'/0\\'/0\\'/0\\'');\n * ```\n *\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.3.0\n */\nclass Wallet {\n    /**\n     * Construct a `Wallet` object from an extended key.\n     *\n     * @param   extendedKey   {ExtendedKey}\n     */\n    constructor(/**\n                 * The extended key.\n                 * @var {ExtendedKey}\n                 */ extendedKey) {\n        this.extendedKey = extendedKey;\n        /**\n         * Whether the wallet is read-only or not.\n         * @var {boolean}\n         */\n        this.readOnly = false;\n        // with an extended public key we have a read-only wallet\n        if (extendedKey.isNeutered()) {\n            this.readOnly = true;\n        }\n        this.publicKey = extendedKey.getPublicKey(index_1.KeyEncoding.ENC_BIN);\n    }\n    /**\n     * Return whether the current wallet is read-only, or not.\n     *\n     * In case of an initialization with an extended *public* key,\n     * the wallet is set to be read-only.\n     *\n     * @return  {boolean}\n     */\n    isReadOnly() {\n        return this.readOnly;\n    }\n    /**\n     * Get a nem2-sdk `Account` object with the extended\n     * key property.\n     *\n     * No derivation is done in this step. Derivation must be done either before\n     * calling this method or using the `getChildAccount` method.\n     *\n     * @param   networkType {NetworkType}   Which network type to use, defaults to MIJIN_TEST.\n     * @return  {Account}\n     * @throws  {Error}     On call of this method with a read-only wallet.\n     */\n    getAccount(networkType = nem2_sdk_1.NetworkType.MIJIN_TEST) {\n        // in case of read-only wallet, not possible to initiate Account\n        // only PublicAccount can be used, see getPublicAccount().\n        if (this.readOnly) {\n            throw new Error(\"Missing private key, please use method getPublicAccount().\");\n        }\n        // note: do not store private key in memory longer than function call\n        return nem2_sdk_1.Account.createFromPrivateKey(this.extendedKey.getPrivateKey(index_1.KeyEncoding.ENC_HEX), networkType);\n    }\n    /**\n     * Get a nem2-sdk `PublicAccount` object with the extended key property.\n     *\n     * No derivation is done in this step. Derivation must be done either before\n     * calling this method or using the `getChildPublicAccount` method.\n     *\n     * @param   networkType {NetworkType}   Which network type to use, defaults to MIJIN_TEST.\n     * @return  {PublicAccount}\n     */\n    getPublicAccount(networkType = nem2_sdk_1.NetworkType.MIJIN_TEST) {\n        return nem2_sdk_1.PublicAccount.createFromPublicKey(this.publicKey.toString('hex'), networkType);\n    }\n    /**\n     * Get a nem2-sdk `Account` object with the derived child account.\n     *\n     * In case no derivation path is provided, the default wallet path\n     * will be used, see `Wallet.DEFAULT_WALLET_PATH`.\n     *\n     * @see Wallet.DEFAULT_WALLET_PATH\n     * @param   path        {string}        Child derivation path, default to `Wallet.DEFAULT_WALLET_PATH`.\n     * @param   networkType {NetworkType}   Which network type to use, defaults to MIJIN_TEST.\n     * @return  {Account | PublicAccount}\n     * @throws  {Error}     On call of this method with a read-only wallet.\n     */\n    getChildAccount(path = Wallet.DEFAULT_WALLET_PATH, networkType = nem2_sdk_1.NetworkType.MIJIN_TEST) {\n        // in case of read-only wallet, get PublicAccount instance\n        if (this.readOnly) {\n            throw new Error(\"Missing private key, please use method getChildPublicAccount().\");\n        }\n        // child key derivation with `ExtendedKeyNode.derivePath()`\n        const childKeyNode = this.extendedKey.derivePath(path);\n        // non-read-only, get Account instance\n        return nem2_sdk_1.Account.createFromPrivateKey(childKeyNode.getPrivateKey(index_1.KeyEncoding.ENC_HEX), networkType);\n    }\n    /**\n     * Get a nem2-sdk `PublicAccount` object with the derived child account.\n     *\n     * In case no derivation path is provided, the default wallet path\n     * will be used, see `Wallet.DEFAULT_WALLET_PATH`.\n     *\n     * @see Wallet.DEFAULT_WALLET_PATH\n     * @param   path        {string}        Child derivation path, default to `Wallet.DEFAULT_WALLET_PATH`.\n     * @param   networkType {NetworkType}   Which network type to use, defaults to MIJIN_TEST.\n     * @return  {Account | PublicAccount}\n     */\n    getChildPublicAccount(path = Wallet.DEFAULT_WALLET_PATH, networkType = nem2_sdk_1.NetworkType.MIJIN_TEST) {\n        // child key derivation with `ExtendedKeyNode.derivePath()`\n        const childKeyNode = this.extendedKey.derivePath(path);\n        return nem2_sdk_1.PublicAccount.createFromPublicKey(childKeyNode.getPublicKey(index_1.KeyEncoding.ENC_HEX), networkType);\n    }\n}\n/**\n * The default wallet derivaton path.\n * @var {string}\n */\nWallet.DEFAULT_WALLET_PATH = 'm/44\\'/43\\'/0\\'/0\\'/0\\'';\nexports.Wallet = Wallet;\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","var ERRORS = require('./errors')\nvar NATIVE = require('./native')\n\n// short-hand\nvar tfJSON = ERRORS.tfJSON\nvar TfTypeError = ERRORS.TfTypeError\nvar TfPropertyTypeError = ERRORS.TfPropertyTypeError\nvar tfSubError = ERRORS.tfSubError\nvar getValueTypeName = ERRORS.getValueTypeName\n\nvar TYPES = {\n  arrayOf: function arrayOf (type, options) {\n    type = compile(type)\n    options = options || {}\n\n    function _arrayOf (array, strict) {\n      if (!NATIVE.Array(array)) return false\n      if (NATIVE.Nil(array)) return false\n      if (options.minLength !== undefined && array.length < options.minLength) return false\n      if (options.maxLength !== undefined && array.length > options.maxLength) return false\n      if (options.length !== undefined && array.length !== options.length) return false\n\n      return array.every(function (value, i) {\n        try {\n          return typeforce(type, value, strict)\n        } catch (e) {\n          throw tfSubError(e, i)\n        }\n      })\n    }\n    _arrayOf.toJSON = function () {\n      var str = '[' + tfJSON(type) + ']'\n      if (options.length !== undefined) {\n        str += '{' + options.length + '}'\n      } else if (options.minLength !== undefined || options.maxLength !== undefined) {\n        str += '{' +\n          (options.minLength === undefined ? 0 : options.minLength) + ',' +\n          (options.maxLength === undefined ? Infinity : options.maxLength) + '}'\n      }\n      return str\n    }\n\n    return _arrayOf\n  },\n\n  maybe: function maybe (type) {\n    type = compile(type)\n\n    function _maybe (value, strict) {\n      return NATIVE.Nil(value) || type(value, strict, maybe)\n    }\n    _maybe.toJSON = function () { return '?' + tfJSON(type) }\n\n    return _maybe\n  },\n\n  map: function map (propertyType, propertyKeyType) {\n    propertyType = compile(propertyType)\n    if (propertyKeyType) propertyKeyType = compile(propertyKeyType)\n\n    function _map (value, strict) {\n      if (!NATIVE.Object(value)) return false\n      if (NATIVE.Nil(value)) return false\n\n      for (var propertyName in value) {\n        try {\n          if (propertyKeyType) {\n            typeforce(propertyKeyType, propertyName, strict)\n          }\n        } catch (e) {\n          throw tfSubError(e, propertyName, 'key')\n        }\n\n        try {\n          var propertyValue = value[propertyName]\n          typeforce(propertyType, propertyValue, strict)\n        } catch (e) {\n          throw tfSubError(e, propertyName)\n        }\n      }\n\n      return true\n    }\n\n    if (propertyKeyType) {\n      _map.toJSON = function () {\n        return '{' + tfJSON(propertyKeyType) + ': ' + tfJSON(propertyType) + '}'\n      }\n    } else {\n      _map.toJSON = function () { return '{' + tfJSON(propertyType) + '}' }\n    }\n\n    return _map\n  },\n\n  object: function object (uncompiled) {\n    var type = {}\n\n    for (var typePropertyName in uncompiled) {\n      type[typePropertyName] = compile(uncompiled[typePropertyName])\n    }\n\n    function _object (value, strict) {\n      if (!NATIVE.Object(value)) return false\n      if (NATIVE.Nil(value)) return false\n\n      var propertyName\n\n      try {\n        for (propertyName in type) {\n          var propertyType = type[propertyName]\n          var propertyValue = value[propertyName]\n\n          typeforce(propertyType, propertyValue, strict)\n        }\n      } catch (e) {\n        throw tfSubError(e, propertyName)\n      }\n\n      if (strict) {\n        for (propertyName in value) {\n          if (type[propertyName]) continue\n\n          throw new TfPropertyTypeError(undefined, propertyName)\n        }\n      }\n\n      return true\n    }\n    _object.toJSON = function () { return tfJSON(type) }\n\n    return _object\n  },\n\n  anyOf: function anyOf () {\n    var types = [].slice.call(arguments).map(compile)\n\n    function _anyOf (value, strict) {\n      return types.some(function (type) {\n        try {\n          return typeforce(type, value, strict)\n        } catch (e) {\n          return false\n        }\n      })\n    }\n    _anyOf.toJSON = function () { return types.map(tfJSON).join('|') }\n\n    return _anyOf\n  },\n\n  allOf: function allOf () {\n    var types = [].slice.call(arguments).map(compile)\n\n    function _allOf (value, strict) {\n      return types.every(function (type) {\n        try {\n          return typeforce(type, value, strict)\n        } catch (e) {\n          return false\n        }\n      })\n    }\n    _allOf.toJSON = function () { return types.map(tfJSON).join(' & ') }\n\n    return _allOf\n  },\n\n  quacksLike: function quacksLike (type) {\n    function _quacksLike (value) {\n      return type === getValueTypeName(value)\n    }\n    _quacksLike.toJSON = function () { return type }\n\n    return _quacksLike\n  },\n\n  tuple: function tuple () {\n    var types = [].slice.call(arguments).map(compile)\n\n    function _tuple (values, strict) {\n      if (NATIVE.Nil(values)) return false\n      if (NATIVE.Nil(values.length)) return false\n      if (strict && (values.length !== types.length)) return false\n\n      return types.every(function (type, i) {\n        try {\n          return typeforce(type, values[i], strict)\n        } catch (e) {\n          throw tfSubError(e, i)\n        }\n      })\n    }\n    _tuple.toJSON = function () { return '(' + types.map(tfJSON).join(', ') + ')' }\n\n    return _tuple\n  },\n\n  value: function value (expected) {\n    function _value (actual) {\n      return actual === expected\n    }\n    _value.toJSON = function () { return expected }\n\n    return _value\n  }\n}\n\n// TODO: deprecate\nTYPES.oneOf = TYPES.anyOf\n\nfunction compile (type) {\n  if (NATIVE.String(type)) {\n    if (type[0] === '?') return TYPES.maybe(type.slice(1))\n\n    return NATIVE[type] || TYPES.quacksLike(type)\n  } else if (type && NATIVE.Object(type)) {\n    if (NATIVE.Array(type)) {\n      if (type.length !== 1) throw new TypeError('Expected compile() parameter of type Array of length 1')\n      return TYPES.arrayOf(type[0])\n    }\n\n    return TYPES.object(type)\n  } else if (NATIVE.Function(type)) {\n    return type\n  }\n\n  return TYPES.value(type)\n}\n\nfunction typeforce (type, value, strict, surrogate) {\n  if (NATIVE.Function(type)) {\n    if (type(value, strict)) return true\n\n    throw new TfTypeError(surrogate || type, value)\n  }\n\n  // JIT\n  return typeforce(compile(type), value, strict)\n}\n\n// assign types to typeforce function\nfor (var typeName in NATIVE) {\n  typeforce[typeName] = NATIVE[typeName]\n}\n\nfor (typeName in TYPES) {\n  typeforce[typeName] = TYPES[typeName]\n}\n\nvar EXTRA = require('./extra')\nfor (typeName in EXTRA) {\n  typeforce[typeName] = EXTRA[typeName]\n}\n\ntypeforce.compile = compile\ntypeforce.TfTypeError = TfTypeError\ntypeforce.TfPropertyTypeError = TfPropertyTypeError\n\nmodule.exports = typeforce\n","let createHash = require('create-hash')\nlet createHmac = require('create-hmac')\n\nfunction hash160 (buffer) {\n  const sha256Hash = createHash('sha256').update(buffer).digest()\n  try {\n    return createHash('rmd160').update(sha256Hash).digest()\n  } catch (err) {\n    return createHash('ripemd160').update(sha256Hash).digest()\n  }\n}\n\nfunction hmacSHA512 (key, data) {\n  return createHmac('sha512', key).update(data).digest()\n}\n\nmodule.exports = { hash160, hmacSHA512 }\n","var native = require('./native')\n\nfunction getTypeName (fn) {\n  return fn.name || fn.toString().match(/function (.*?)\\s*\\(/)[1]\n}\n\nfunction getValueTypeName (value) {\n  return native.Nil(value) ? '' : getTypeName(value.constructor)\n}\n\nfunction getValue (value) {\n  if (native.Function(value)) return ''\n  if (native.String(value)) return JSON.stringify(value)\n  if (value && native.Object(value)) return ''\n  return value\n}\n\nfunction captureStackTrace (e, t) {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(e, t)\n  }\n}\n\nfunction tfJSON (type) {\n  if (native.Function(type)) return type.toJSON ? type.toJSON() : getTypeName(type)\n  if (native.Array(type)) return 'Array'\n  if (type && native.Object(type)) return 'Object'\n\n  return type !== undefined ? type : ''\n}\n\nfunction tfErrorString (type, value, valueTypeName) {\n  var valueJson = getValue(value)\n\n  return 'Expected ' + tfJSON(type) + ', got' +\n    (valueTypeName !== '' ? ' ' + valueTypeName : '') +\n    (valueJson !== '' ? ' ' + valueJson : '')\n}\n\nfunction TfTypeError (type, value, valueTypeName) {\n  valueTypeName = valueTypeName || getValueTypeName(value)\n  this.message = tfErrorString(type, value, valueTypeName)\n\n  captureStackTrace(this, TfTypeError)\n  this.__type = type\n  this.__value = value\n  this.__valueTypeName = valueTypeName\n}\n\nTfTypeError.prototype = Object.create(Error.prototype)\nTfTypeError.prototype.constructor = TfTypeError\n\nfunction tfPropertyErrorString (type, label, name, value, valueTypeName) {\n  var description = '\" of type '\n  if (label === 'key') description = '\" with key type '\n\n  return tfErrorString('property \"' + tfJSON(name) + description + tfJSON(type), value, valueTypeName)\n}\n\nfunction TfPropertyTypeError (type, property, label, value, valueTypeName) {\n  if (type) {\n    valueTypeName = valueTypeName || getValueTypeName(value)\n    this.message = tfPropertyErrorString(type, label, property, value, valueTypeName)\n  } else {\n    this.message = 'Unexpected property \"' + property + '\"'\n  }\n\n  captureStackTrace(this, TfTypeError)\n  this.__label = label\n  this.__property = property\n  this.__type = type\n  this.__value = value\n  this.__valueTypeName = valueTypeName\n}\n\nTfPropertyTypeError.prototype = Object.create(Error.prototype)\nTfPropertyTypeError.prototype.constructor = TfTypeError\n\nfunction tfCustomError (expected, actual) {\n  return new TfTypeError(expected, {}, actual)\n}\n\nfunction tfSubError (e, property, label) {\n  // sub child?\n  if (e instanceof TfPropertyTypeError) {\n    property = property + '.' + e.__property\n\n    e = new TfPropertyTypeError(\n      e.__type, property, e.__label, e.__value, e.__valueTypeName\n    )\n\n  // child?\n  } else if (e instanceof TfTypeError) {\n    e = new TfPropertyTypeError(\n      e.__type, property, label, e.__value, e.__valueTypeName\n    )\n  }\n\n  captureStackTrace(e)\n  return e\n}\n\nmodule.exports = {\n  TfTypeError: TfTypeError,\n  TfPropertyTypeError: TfPropertyTypeError,\n  tfCustomError: tfCustomError,\n  tfSubError: tfSubError,\n  tfJSON: tfJSON,\n  getValueTypeName: getValueTypeName\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// internal dependencies\nconst index_1 = require(\"../index\");\n/**\n * Class `Network` describes an extended key prefix of 4 bytes. This object\n * is defined by `public` and `private` fields containing the unsigned\n * integer value of the prefix.\n *\n * For the BITCOIN protocol, the prefixes result to `xprv` and `xpub`\n * for the mainnet network.\n *\n * For the CATAPULT protocol, we will be using the same prefixes and\n * extended key sizes and formats.\n *\n * @see https://github.com/bitcoinjs/bip32/blob/master/src/bip32.js#L19\n * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n * @see https://github.com/bitcoinjs/bip32\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.1.0\n */\nclass Network {\n    /**\n     * Construct an `Network` object out of its' base58 payload.\n     *\n     * Result in Base58 notation to `xpub` and `xprv`.\n     *\n     * @param   base58Payload   {string}\n     */\n    constructor(/**\n                 * Prefix for extended public key (4 bytes unsigned integer)\n                 * @var {number}\n                 */ publicKeyPrefix, \n    /**\n     * Prefix for extended private key (4 bytes unsigned integer)\n     * @var {number}\n     */\n    privateKeyPrefix, \n    /**\n     * The ellyptic curve algorithm\n     * @var {CurveAlgorithm}\n     */\n    curve = index_1.CurveAlgorithm.secp256k1) {\n        this.publicKeyPrefix = publicKeyPrefix;\n        this.privateKeyPrefix = privateKeyPrefix;\n        this.curve = curve;\n    }\n}\n/**\n * BITCOIN protocol extended key prefixes\n *\n * Result in Base58 notation to `xpub` and `xprv`.\n *\n * @see https://github.com/bitcoinjs/bip32/blob/master/src/bip32.js#L19\n * @var {Network}\n */\nNetwork.BITCOIN = new Network(0x0488b21e, 0x0488ade4, index_1.CurveAlgorithm.secp256k1);\n/**\n * CATAPULT protocol extended key prefixes\n *\n * Result in Base58 notation to `xpub` and `xprv`.\n *\n * @var {Network}\n */\nNetwork.CATAPULT = new Network(0x0488b21e, 0x0488ade4, index_1.CurveAlgorithm.ed25519);\nexports.Network = Network;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// browserify by default only pulls in files that are hard coded in requires\n// In order of last to first in this file, the default wordlist will be chosen\n// based on what is present. (Bundles may remove wordlists they don't need)\nconst wordlists = {};\nexports.wordlists = wordlists;\nlet _default;\nexports._default = _default;\ntry {\n    exports._default = _default = require('./wordlists/chinese_simplified.json');\n    wordlists.chinese_simplified = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_traditional.json');\n    wordlists.chinese_traditional = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/korean.json');\n    wordlists.korean = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/french.json');\n    wordlists.french = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/italian.json');\n    wordlists.italian = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/spanish.json');\n    wordlists.spanish = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/japanese.json');\n    wordlists.japanese = _default;\n    wordlists.JA = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/english.json');\n    wordlists.english = _default;\n    wordlists.EN = _default;\n}\ncatch (err) { }\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst bs58check = require('bs58check');\nconst createHash = require('create-hash');\nconst createHmac = require('create-hmac');\n// internal dependencies\nconst index_1 = require(\"../../index\");\n/**\n * Implementation of CKDPriv() function as described in SLIP-10\n * for multi-curve BIP32 compatibility with ED25519.\n *\n * Difference to BIP32:\n *  - Using 64-bytes master private key instead 32-bytes.\n *\n * @see https://cardanolaunch.com/assets/Ed25519_BIP.pdf\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md\n * @see https://github.com/alepop/ed25519-hd-key/blob/master/src/index.ts#L36\n * @param   parent      {NodeEd25519}\n * @param   index       {number}\n * @param   macType     {MACType}\n * @return  {NodeEd25519}\n */\nconst CKDPriv = (parent, index, macType = index_1.MACType.HMAC) => {\n    const indexBuffer = Buffer.allocUnsafe(4);\n    indexBuffer.writeUInt32BE(index, 0);\n    // 0x00 || privateKey || index\n    const data = Buffer.concat([Buffer.alloc(1, 0), parent.privateKey, indexBuffer]);\n    // derive with said `macType` MAC algorithm\n    const I = index_1.MACImpl.create(macType, parent.chainCode, data);\n    // const I = createHmac('sha512', parent.chainCode)\n    //     .update(data)\n    //     .digest();\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    // IL = privateKey ; IR = chainCode\n    return new NodeEd25519(IL, undefined, IR);\n};\n/**\n * Class `NodeEd25519` describes a hyper-deterministic BIP32 node\n * implementation, compatible with ed25519 EC-curve as described in\n * following paper :\n *\n *     https://cardanolaunch.com/assets/Ed25519_BIP.pdf\n *\n * It is an implementation of BIP32 that is adapted to work with\n * ED25519 ellyptic curve keys rather than secp256k1 keys.\n *\n * This class *uses* features provided by the `bitcoinjs/bip32` package\n * and therefor is licensed under the BSD-2 Clause License as mentioned\n * [here](https://github.com/bitcoinjs/bip32/blob/master/LICENSE).\n *\n * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md\n * @see https://github.com/bitcoinjs/bip32\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.2.0\n */\nclass NodeEd25519 extends index_1.DeterministicKey {\n    /**\n     * Create a hyper-deterministic ED25519 node from a\n     * binary seed.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/src/bip32.js#L258\n     * @param   seed    {Buffer}\n     * @param   network {Network}\n     * @return  {NodeInterface}\n     */\n    static fromSeed(seed, network = index_1.Network.CATAPULT, macType = index_1.MACType.HMAC) {\n        if (seed.length < 16)\n            throw new TypeError('Seed should be at least 128 bits');\n        if (seed.length > 64)\n            throw new TypeError('Seed should be at most 512 bits');\n        // (1) Create KMAC seeded with `ed25519 seed`\n        const I = index_1.MACImpl.create(macType, Buffer.from('ed25519 seed', 'utf8'), seed);\n        // const hmac = createHmac('sha512', Buffer.from('ed25519 seed', 'utf8'));\n        // const I = hmac.update(seed).digest();\n        // (2) Split in 2 parts: privateKey and chainCode\n        const kL = I.slice(0, 32);\n        const kR = I.slice(32);\n        // kL = privateKey ; kR = chainCode\n        return new NodeEd25519(kL, undefined, kR, network);\n    }\n    /**\n     * Decode a base58 extended key payload into its'\n     * `NodeEd25519` object representation.\n     *\n     * This method parses the base58 binary data and\n     * uses read fields to initialize a BIP32-ED25519\n     * hyper-deterministic node.\n     *\n     * No ED25519 changes have been done here.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/ts-src/bip32.ts#L286\n     * @param   inString    {string}    The base58 payload of the extended key.\n     * @param   network     {Network}   (Optional) The network of the key, default to `Network.CATAPULT`.\n     * @return  {NodeEd25519}\n     */\n    static fromBase58(inString, network = index_1.Network.CATAPULT) {\n        // decode base58\n        const buffer = bs58check.decode(inString);\n        if (buffer.length !== 78) {\n            throw new TypeError('Base58 payload must be exactly 78 bytes, but got: ' + buffer.length + ' bytes.');\n        }\n        // 4 bytes: version bytes\n        const version = buffer.readUInt32BE(0);\n        if (version !== index_1.Network.CATAPULT.privateKeyPrefix\n            && version !== index_1.Network.CATAPULT.publicKeyPrefix) {\n            throw new TypeError('Payload Version must be one of: ' + index_1.Network.CATAPULT.privateKeyPrefix\n                + ' or ' + index_1.Network.CATAPULT.publicKeyPrefix + '.');\n        }\n        // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...\n        const depth = buffer[4];\n        // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n        const parentFingerprint = buffer.readUInt32BE(5);\n        // if depth is 0, parentFingerprint must be 0x00000000 (master node)\n        if (depth === 0 && parentFingerprint !== 0x00000000) {\n            throw new TypeError('Expected master node but got child with parentFingerprint: ' + parentFingerprint + '.');\n        }\n        // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n        // This is encoded in MSB order. (0x00000000 if master key)\n        const index = buffer.readUInt32BE(9);\n        // If depth is 0, index must also be 0 (master node)\n        if (depth === 0 && index !== 0) {\n            throw new TypeError('Expected index 0 with depth 0 but got index: ' + index + '.');\n        }\n        // 32 bytes: the chain code\n        const chainCode = buffer.slice(13, 45);\n        let hd;\n        if (version === index_1.Network.CATAPULT.privateKeyPrefix) {\n            // 33 bytes: private key data (0x00 + k)\n            if (buffer.readUInt8(45) !== 0x00) {\n                throw new TypeError('Private key must start be prepended by 0x00.');\n            }\n            // extract private key (32 bytes)\n            const k = buffer.slice(46, 78);\n            // k = privateKey (createFromPrivateKey)\n            hd = new NodeEd25519(k, undefined, chainCode, network, depth, index, parentFingerprint);\n        }\n        else {\n            // 33 bytes: public key data (0x02 + X or 0x03 + X)\n            // extract public key (33 bytes)\n            const X = buffer.slice(45, 78);\n            // X = publicKey\n            hd = new NodeEd25519(undefined, X, chainCode, network, depth, index, parentFingerprint);\n        }\n        return hd;\n    }\n    /**\n     * Getter for the `publicKey` of the key.\n     *\n     * @access public\n     * @return {Buffer}\n     */\n    get publicKey() {\n        if (this.getQ() !== undefined) {\n            return this.getQ();\n        }\n        // if the publicKey is not set, derive from private key\n        const extract = index_1.CatapultECC.extractPublicKey(this.privateKey, index_1.Cryptography.sha3Hash);\n        return Buffer.from(extract);\n    }\n    /**\n     * Get the neutered node.\n     *\n     * @access public\n     * @return {NodeInterface}\n     */\n    neutered() {\n        return new NodeEd25519(undefined, this.publicKey, this.chainCode, this.network, this.getDepth(), this.getIndex(), this.getParentFingerprint());\n    }\n    /**\n     * Generic child derivation.\n     *\n     * This method reads the derivation paths and uses `derive`\n     * and `deriveHardened` accordingly.\n     *\n     * Derivation paths starting with `m/` are only possible\n     * with master nodes (for example created from seed).\n     *\n     * @param   index   {number}\n     * @return  {NodeInterface}\n     */\n    derivePath(path) {\n        if (!this.isValidPath(path)) {\n            throw new TypeError('Invalid BIP32 derivation path provided.');\n        }\n        let splitPath = path.split('/');\n        // check whether current node is a master node,\n        // if not: \"m/\" derivation is not possible.\n        if (splitPath[0] === 'm' && this.getParentFingerprint()) {\n            throw new TypeError('Expected master node with \"m\" derivation, but got child with parentFingerprint.');\n        }\n        // drop first level path \"m\"\n        if (splitPath[0] === 'm') {\n            splitPath = splitPath.slice(1);\n        }\n        // apply derivation for each path level\n        return splitPath.reduce((prevHd, indexStr) => {\n            let index;\n            // Always use hardened key derivation\n            index = parseInt(indexStr.replace(/'/, ''), 10);\n            return prevHd.deriveHardened(index);\n        }, this);\n    }\n    /**\n     * Hardened child derivation (derives private key).\n     *\n     * @internal Do not use this method directly, please use the `derivePath()` method instead.\n     * @param   index   {number}\n     * @return  {NodeInterface}\n     */\n    deriveHardened(index) {\n        const UINT31_MAX = Math.pow(2, 31) - 1;\n        if (index > UINT31_MAX) {\n            throw new TypeError('Hardened derivation maximum index overflow.');\n        }\n        // Only derives hardened private keys by default\n        return this.derive(index + NodeEd25519.HIGHEST_BIT);\n    }\n    /**\n     * Derive a child node with `index`.\n     *\n     * When the node is *not neutered*, an extended private\n     * key will be created and when the node is *neutered*,\n     * an extended public key will be created.\n     *\n     * This method  is an overload of the `bitcoinjs/bip32`\n     * package's `derive` method adapted to use *our* child\n     * key derivation functions `CKDPriv` and `CKDPub`.\n     *\n     * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions\n     * @internal Do not use this method directly, please use the `derivePath()` method instead.\n     * @param   index   {number}\n     * @return  {NodeInterface}\n     */\n    derive(index) {\n        // check derivation validity\n        const isHardened = index >= NodeEd25519.HIGHEST_BIT;\n        if (isHardened && this.isNeutered()) {\n            throw new TypeError('Missing private key for hardened child key derivation.');\n        }\n        // Parent key is current node\n        const parentKey = this;\n        if (!this.isNeutered()) {\n            // (1) Private parent key -> private child key\n            // use ED25519-adapted child key derivation function\n            return CKDPriv(parentKey, index);\n        }\n        // (2) Public parent key -> public child key\n        // This is not possible with our implementation\n        throw new Error(\"Non-Hardened key derivation is not permitted with ED25519 curve.\");\n    }\n    /**\n     * Sign binary data with current node.\n     *\n     * Overloads the `bitcoinjs/bip32` method named `sign` in order to\n     * be ED25519 compliant and use `CatapultECC` with ed25519 instead\n     * of secp256k1.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/ts-src/bip32.ts#L277\n     * @param   hash    {Buffer}    The binary data to sign.\n     * @param   length  {number}    (Optional) The byte size of the produced SHA3 hash, defaults to 64\n     * @return  {NodeInterface}\n     */\n    sign(hash) {\n        const secretKey = this.privateKey;\n        const hasher = index_1.Cryptography.createSha3Hasher(64); // 64=size\n        const signature = index_1.CatapultECC.sign(hash, this.publicKey, secretKey, hasher);\n        return Buffer.from(signature);\n    }\n    /**\n     * Verify a signature `signature` for data\n     * `hash` with the current node.\n     *\n     * Overloads the `bitcoinjs/bip32` method named `verify` in order to\n     * be ED25519 compliant and use `CatapultECC` with ed25519 instead\n     * of secp256k1.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/ts-src/bip32.ts#L281\n     * @param   hash        {Buffer}    The binary data that was supposedly signed.\n     * @param   signature   {Buffer}    The signature binary data that needs to be verified.\n     * @return  {boolean}   Returns true for a valid signature, false otherwise.\n     */\n    verify(hash, signature) {\n        const length = signature.byteLength === 32 ? 32 : 64;\n        const hasher = index_1.Cryptography.createSha3Hasher(length);\n        return index_1.CatapultECC.verify(hash, this.publicKey, signature, hasher);\n    }\n    /**\n     * Validate a BIP32/BIP44 path by regular expression.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/src/bip32.js#L26\n     * @param   path    {string}\n     * @return  {boolean}\n     */\n    isValidPath(path) {\n        return path.match(/^(m\\/)?(\\d+'?\\/)*\\d+'?$/) !== null;\n    }\n}\n/**\n * Hardened key derivation uses HIGHEST_BIT.\n * @var number\n */\nNodeEd25519.HIGHEST_BIT = 0x80000000;\nexports.NodeEd25519 = NodeEd25519;\n","var bs58check = require('bs58check')\n\nfunction decodeRaw (buffer, version) {\n  // check version only if defined\n  if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version')\n\n  // uncompressed\n  if (buffer.length === 33) {\n    return {\n      version: buffer[0],\n      privateKey: buffer.slice(1, 33),\n      compressed: false\n    }\n  }\n\n  // invalid length\n  if (buffer.length !== 34) throw new Error('Invalid WIF length')\n\n  // invalid compression flag\n  if (buffer[33] !== 0x01) throw new Error('Invalid compression flag')\n\n  return {\n    version: buffer[0],\n    privateKey: buffer.slice(1, 33),\n    compressed: true\n  }\n}\n\nfunction encodeRaw (version, privateKey, compressed) {\n  var result = new Buffer(compressed ? 34 : 33)\n\n  result.writeUInt8(version, 0)\n  privateKey.copy(result, 1)\n\n  if (compressed) {\n    result[33] = 0x01\n  }\n\n  return result\n}\n\nfunction decode (string, version) {\n  return decodeRaw(bs58check.decode(string), version)\n}\n\nfunction encode (version, privateKey, compressed) {\n  if (typeof version === 'number') return bs58check.encode(encodeRaw(version, privateKey, compressed))\n\n  return bs58check.encode(\n    encodeRaw(\n      version.version,\n      version.privateKey,\n      version.compressed\n    )\n  )\n}\n\nmodule.exports = {\n  decode: decode,\n  decodeRaw: decodeRaw,\n  encode: encode,\n  encodeRaw: encodeRaw\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst bs58check = require('bs58check');\n// internal dependencies\nconst index_1 = require(\"../../index\");\n/**\n * Class `DeterministicKey` describes hierarchical deterministic\n * keys that are compatible with the `bitcoinjs/bip32` implementation.\n *\n * This class is used to provide with compatibility for both schemes:\n * BIP32 and NIP6.\n *\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.2.0\n */\nclass DeterministicKey {\n    /**\n     * Construct a `NodeEd25519` object.\n     *\n     * @param ___D      {Buffer|undefined}  The private key of the node.\n     * @param ___Q      {Buffer|undefined}  The public key of the node.\n     * @param chainCode {Buffer}            The chain code of the node (32 bytes).\n     * @param network   {Network}           The network of the node, defaults to `Network.CATAPULT`.\n     * @param ___DEPTH  {number}            The depth of the node (0 for master).\n     * @param ___INDEX  {number}            The account index (0 for master).\n     * @param ___PARENT_FINGERPRINT     {number}    The parent fingerprint (0x00000000 for master)\n     */\n    constructor(__D, // private Key\n    __Q, // public Key\n    chainCode, network = index_1.Network.CATAPULT, __DEPTH = 0, __INDEX = 0, __PARENT_FINGERPRINT = 0x00000000) {\n        this.__D = __D;\n        this.__Q = __Q;\n        this.chainCode = chainCode;\n        this.network = network;\n        this.__DEPTH = __DEPTH;\n        this.__INDEX = __INDEX;\n        this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;\n    }\n    /// end-region: Abstract methods\n    /**\n     * Getter for the `depth` of the key.\n     *\n     * @access private\n     * @return {number}\n     */\n    get depth() {\n        return this.__DEPTH;\n    }\n    /**\n     * Getter for the `index` (account index) of the key.\n     *\n     * @access private\n     * @return {number}\n     */\n    get index() {\n        return this.__INDEX;\n    }\n    /**\n     * Getter for the `parentFingerprint` parent fingerprint of the key.\n     *\n     * @access private\n     * @return {number}\n     */\n    get parentFingerprint() {\n        return this.__PARENT_FINGERPRINT;\n    }\n    /**\n     * Getter for the `privateKey` of the key.\n     *\n     * @access public\n     * @return {Buffer}\n     */\n    get privateKey() {\n        if (!this.__D) {\n            throw new Error('Missing private key.');\n        }\n        return this.__D;\n    }\n    /**\n     * Getter for the `identifier` of the key.\n     *\n     * The identifier is build as follows:\n     * - Step 1: Sha3-256 of the public key\n     * - Step 2: RIPEMD160 of the sha3 hash\n     *\n     * @access public\n     * @return {Buffer}\n     */\n    get identifier() {\n        return index_1.Cryptography.hash160(this.publicKey);\n    }\n    /**\n     * Getter for the `fingerprint` of the key.\n     *\n     * The fingerprint are the first 4 bytes of the\n     * identifier of the key.\n     *\n     * @access public\n     * @return {Buffer}\n     */\n    get fingerprint() {\n        return this.identifier.slice(0, 4);\n    }\n    /**\n     * Return whether the node is neutered or not.\n     *\n     * Neutered keys = Extended Public Keys\n     * Non-Neutered keys = Extended Private Keys\n     *\n     * @access public\n     * @return {Buffer}\n     */\n    isNeutered() {\n        return this.__D === undefined;\n    }\n    /**\n     * Getter for private field `__D`.\n     *\n     * This method is added to explicitely expose the\n     * `__D` field to allow sub-classes to make\n     * use of it.\n     *\n     * The `__D` field represents the private key.\n     *\n     * @access  public\n     * @return  {Buffer}\n     */\n    getD() {\n        return this.__D;\n    }\n    /**\n     * Getter for private field `__Q`.\n     *\n     * This method is added to explicitely expose the\n     * `__Q` field to allow sub-classes to make\n     * use of it.\n     *\n     * The `__Q` field represents the public key.\n     *\n     * @access  public\n     * @return  {Buffer}\n     */\n    getQ() {\n        return this.__Q;\n    }\n    /**\n     * Getter for private field `depth`.\n     *\n     * This method is added to explicitely expose the\n     * `depth` field to allow sub-classes to make\n     * use of it.\n     *\n     * @access  public\n     * @return  {Buffer}\n     */\n    getDepth() {\n        return this.depth;\n    }\n    /**\n     * Getter for private field `index`.\n     *\n     * This method is added to explicitely expose the\n     * `index` field to allow sub-classes to make\n     * use of it.\n     *\n     * @access  public\n     * @return  {Buffer}\n     */\n    getIndex() {\n        return this.index;\n    }\n    /**\n     * Getter for private field `parentFingerprint`.\n     *\n     * This method is added to explicitely expose the\n     * `parentFingerprint` field to allow sub-classes to make\n     * use of it.\n     *\n     * @access  public\n     * @return  {Buffer}\n     */\n    getParentFingerprint() {\n        return this.parentFingerprint;\n    }\n    /**\n     * Get the Base58 representation of said key.\n     *\n     * This method is modified to use the `Network` class to\n     * determine privateKey and publicKey prefixes (version field).\n     *\n     * The Base58 representation is laid on 78 bytes with following\n     * specification (with `||` concatenation operator) :\n     *\n     * `version || depth || parent || index || chain code || priv/pub`\n     *\n     * Private keys are prepended with `0x00`, public keys are encoded\n     * in X9.62 format.\n     *\n     * @see https://github.com/bitcoinjs/bip32/blob/master/src/bip32.js#L73\n     * @access  public\n     * @return  {string}\n     */\n    toBase58() {\n        // determine whether we create a XPRV or XPUB\n        const version = !this.isNeutered()\n            ? this.network.privateKeyPrefix\n            : this.network.publicKeyPrefix;\n        // prepare extended key buffer\n        const buffer = Buffer.allocUnsafe(78);\n        // 4 bytes: version bytes\n        buffer.writeUInt32BE(version, 0);\n        // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....\n        buffer.writeUInt8(this.depth, 4);\n        // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)\n        buffer.writeUInt32BE(this.parentFingerprint, 5);\n        // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.\n        // This is encoded in big endian. (0x00000000 if master key)\n        buffer.writeUInt32BE(this.index, 9);\n        // 32 bytes: the chain code\n        this.chainCode.copy(buffer, 13);\n        // 33 bytes: the public key or private key data\n        if (!this.isNeutered()) {\n            // 0x00 + k for private keys\n            buffer.writeUInt8(0, 45);\n            this.privateKey.copy(buffer, 46);\n        }\n        else {\n            // X9.62 encoding for public keys\n            this.publicKey.copy(buffer, 45);\n        }\n        // return Base58 encoded buffer\n        return bs58check.encode(buffer);\n    }\n    //XXX hidden usage of toHex() ?\n    toWIF() {\n        throw new TypeError(\"Catapult BIP32 keys cannot be converted to WIF. Please use the toHex() method.\");\n    }\n}\nexports.DeterministicKey = DeterministicKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright 2019 Grégory Saive for NEM Foundation\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar CurveAlgorithm_1 = require(\"./src/CurveAlgorithm\");\nexports.CurveAlgorithm = CurveAlgorithm_1.CurveAlgorithm;\nvar MACType_1 = require(\"./src/MACType\");\nexports.MACType = MACType_1.MACType;\nvar MACImpl_1 = require(\"./src/MACImpl\");\nexports.MACImpl = MACImpl_1.MACImpl;\nvar KeyEncoding_1 = require(\"./src/KeyEncoding\");\nexports.KeyEncoding = KeyEncoding_1.KeyEncoding;\nvar Network_1 = require(\"./src/Network\");\nexports.Network = Network_1.Network;\nvar Cryptography_1 = require(\"./src/Cryptography\");\nexports.Cryptography = Cryptography_1.Cryptography;\nvar CatapultECC_1 = require(\"./src/CatapultECC\");\nexports.CatapultECC = CatapultECC_1.CatapultECC;\nvar DeterministicKey_1 = require(\"./src/Compat/DeterministicKey\");\nexports.DeterministicKey = DeterministicKey_1.DeterministicKey;\nvar NodeEd25519_1 = require(\"./src/Curves/NodeEd25519\");\nexports.NodeEd25519 = NodeEd25519_1.NodeEd25519;\nvar MnemonicPassPhrase_1 = require(\"./src/MnemonicPassPhrase\");\nexports.MnemonicPassPhrase = MnemonicPassPhrase_1.MnemonicPassPhrase;\nvar ExtendedKey_1 = require(\"./src/ExtendedKey\");\nexports.ExtendedKey = ExtendedKey_1.ExtendedKey;\nvar Wallet_1 = require(\"./src/Wallet\");\nexports.Wallet = Wallet_1.Wallet;\n","\"use strict\";\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst nem2_sdk_1 = require(\"nem2-sdk\");\nconst js_sha3_1 = require(\"js-sha3\");\nconst createHash = require('create-hash');\nconst createHmac = require('create-hmac');\nclass Cryptography {\n    /**\n     *\n     * @param buffer\n     */\n    static hash160(buffer) {\n        // step 1: SHA256(buffer)\n        const sha256Hash = createHash('sha256').update(buffer).digest();\n        // step 2: RIPEMD160(shaHash)\n        try {\n            return createHash('rmd160').update(sha256Hash).digest();\n        }\n        catch (err) {\n            return createHash('ripemd160').update(sha256Hash).digest();\n        }\n    }\n    /**\n     * Creates a Hash Message Authentication Code.\n     *\n     * This method uses SHA512 algorithm and `create-hmac`\n     * dependency for the MAC generation.\n     *\n     * @param   key     {Buffer}\n     * @param   data    {Buffer}\n     * @return  {Buffer}\n     */\n    static HMAC(key, data) {\n        return createHmac('sha512', key).update(data).digest();\n    }\n    /**\n     * Creates a Keccak Message Authentication Code.\n     *\n     * @internal This method is used internally for key derivation\n     * @param   key         {Buffer}\n     * @param   data        {Buffer}\n     * @param   publicSalt  {string}\n     * @return  {Buffer}\n     */\n    static KMAC(key, data, publicSalt) {\n        const hex = js_sha3_1.kmac256(key, data, 512, publicSalt || '');\n        return Buffer.from(hex, 'hex');\n    }\n    /**\n     * Calculates the hash of data.\n     * @param {Uint8Array} dest The computed hash destination.\n     * @param {Uint8Array} data The data to hash.\n     * @param {numeric} length The hash length in bytes.\n     */\n    static sha3Hash(dest, data, length = 64) {\n        nem2_sdk_1.SHA3Hasher.func(dest, data, length);\n        return dest;\n    }\n    /**\n     * Creates a SHA3 hasher object.\n     * @param {numeric} length The hash length in bytes.\n     * @returns {object} The hasher.\n     */\n    static createSha3Hasher(length = 64) {\n        return nem2_sdk_1.SHA3Hasher.createHasher(length);\n    }\n}\nexports.Cryptography = Cryptography;\n","\"use strict\";\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst nacl_catapult = __importStar(require(\"nem2-sdk\"));\nconst nem2_sdk_1 = require(\"nem2-sdk\");\nclass CatapultECC {\n    /**\n     *\n     * @param d\n     */\n    static clamp(d) {\n        d[0] &= 248;\n        d[31] &= 127;\n        d[31] |= 64;\n    }\n    /**\n     *\n     * @param sk\n     * @param hashfunc\n     */\n    static prepareForScalarMult(sk, hashfunc) {\n        const d = new Uint8Array(CatapultECC.HASH_SIZE);\n        hashfunc(d, sk);\n        CatapultECC.clamp(d);\n        return d;\n    }\n    static extractPublicKey(sk, hashfunc) {\n        const c = nacl_catapult;\n        const d = CatapultECC.prepareForScalarMult(sk, hashfunc);\n        const p = [c.gf(), c.gf(), c.gf(), c.gf()];\n        const pk = new Uint8Array(CatapultECC.KEY_SIZE);\n        c.scalarbase(p, d);\n        c.pack(pk, p);\n        return pk;\n    }\n    static sign(m, pk, sk, hasher) {\n        const c = nacl_catapult;\n        const d = new Uint8Array(CatapultECC.HASH_SIZE);\n        hasher.reset();\n        hasher.update(sk);\n        hasher.finalize(d);\n        CatapultECC.clamp(d);\n        const r = new Uint8Array(CatapultECC.HASH_SIZE);\n        hasher.reset();\n        hasher.update(d.subarray(CatapultECC.HALF_HASH_SIZE));\n        hasher.update(m);\n        hasher.finalize(r);\n        const p = [c.gf(), c.gf(), c.gf(), c.gf()];\n        const signature = new Uint8Array(CatapultECC.SIGNATURE_SIZE);\n        c.reduce(r);\n        c.scalarbase(p, r);\n        c.pack(signature, p);\n        const h = new Uint8Array(CatapultECC.HASH_SIZE);\n        hasher.reset();\n        hasher.update(signature.subarray(0, CatapultECC.HALF_SIGNATURE_SIZE));\n        hasher.update(pk);\n        hasher.update(m);\n        hasher.finalize(h);\n        c.reduce(h);\n        // muladd\n        const x = new Float64Array(CatapultECC.HASH_SIZE);\n        nem2_sdk_1.RawArray.copy(x, r, CatapultECC.HALF_HASH_SIZE);\n        for (let i = 0; i < CatapultECC.HALF_HASH_SIZE; ++i) {\n            for (let j = 0; j < CatapultECC.HALF_HASH_SIZE; ++j)\n                x[i + j] += h[i] * d[j];\n        }\n        c.modL(signature.subarray(CatapultECC.HALF_SIGNATURE_SIZE), x);\n        CatapultECC.encodedSChecker.requireValid(signature.subarray(CatapultECC.HALF_SIGNATURE_SIZE));\n        return signature;\n    }\n    static verify(pk, m, signature, hasher) {\n        // reject non canonical signature\n        if (!CatapultECC.encodedSChecker.isCanonical(signature.subarray(CatapultECC.HALF_SIGNATURE_SIZE)))\n            return false;\n        // reject weak (zero) public key\n        if (nem2_sdk_1.RawArray.isZeroFilled(pk))\n            return false;\n        const c = nacl_catapult;\n        const p = [c.gf(), c.gf(), c.gf(), c.gf()];\n        const q = [c.gf(), c.gf(), c.gf(), c.gf()];\n        if (c.unpackneg(q, pk))\n            return false;\n        const h = new Uint8Array(CatapultECC.HASH_SIZE);\n        hasher.reset();\n        hasher.update(signature.subarray(0, CatapultECC.HALF_SIGNATURE_SIZE));\n        hasher.update(pk);\n        hasher.update(m);\n        hasher.finalize(h);\n        c.reduce(h);\n        c.scalarmult(p, q, h);\n        const t = new Uint8Array(CatapultECC.SIGNATURE_SIZE);\n        c.scalarbase(q, signature.subarray(CatapultECC.HALF_SIGNATURE_SIZE));\n        c.add(p, q);\n        c.pack(t, p);\n        return 0 === c.crypto_verify_32(signature, 0, t, 0);\n    }\n    static deriveSharedKey(salt, sk, pk, hashfunc) {\n        const c = nacl_catapult;\n        const d = CatapultECC.prepareForScalarMult(sk, hashfunc);\n        // sharedKey = pack(p = d (derived from sk) * q (derived from pk))\n        const q = [c.gf(), c.gf(), c.gf(), c.gf()];\n        const p = [c.gf(), c.gf(), c.gf(), c.gf()];\n        const sharedKey = new Uint8Array(CatapultECC.KEY_SIZE);\n        c.unpackneg(q, pk);\n        c.scalarmult(p, q, d);\n        c.pack(sharedKey, p);\n        // salt the shared key\n        for (let i = 0; i < CatapultECC.KEY_SIZE; ++i)\n            sharedKey[i] ^= salt[i];\n        // return the hash of the result\n        const sharedKeyHash = new Uint8Array(CatapultECC.KEY_SIZE);\n        hashfunc(sharedKeyHash, sharedKey, CatapultECC.KEY_SIZE);\n        return sharedKeyHash;\n    }\n    static keyToUint8(key) {\n        const buffer = Buffer.from(key);\n        return Uint8Array.from(buffer);\n    }\n}\nCatapultECC.KEY_SIZE = 32;\nCatapultECC.SIGNATURE_SIZE = 64;\nCatapultECC.HALF_SIGNATURE_SIZE = CatapultECC.SIGNATURE_SIZE / 2;\nCatapultECC.HASH_SIZE = 64;\nCatapultECC.HALF_HASH_SIZE = CatapultECC.HASH_SIZE / 2;\n/**\n *\n */\nCatapultECC.encodedSChecker = (function () {\n    const Is_Reduced = 1;\n    const Is_Zero = 2;\n    function validateEncodedSPart(s) {\n        if (nem2_sdk_1.RawArray.isZeroFilled(s))\n            return Is_Zero | Is_Reduced;\n        const copy = new Uint8Array(CatapultECC.SIGNATURE_SIZE);\n        nem2_sdk_1.RawArray.copy(copy, s, CatapultECC.HALF_SIGNATURE_SIZE);\n        nacl_catapult.reduce(copy);\n        return nem2_sdk_1.RawArray.deepEqual(s, copy, CatapultECC.HALF_SIGNATURE_SIZE) ? Is_Reduced : 0;\n    }\n    return {\n        isCanonical: (s) => Is_Reduced === validateEncodedSPart(s),\n        requireValid: (s) => {\n            if (0 === (validateEncodedSPart(s) & Is_Reduced))\n                throw Error('S part of signature invalid');\n        }\n    };\n})();\nexports.CatapultECC = CatapultECC;\n","\"use strict\";\n/**\n * Copyright 2019 NEM\n *\n * Licensed under the BSD 2-Clause License (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://opensource.org/licenses/BSD-2-Clause\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Enum `KeyEncoding` describes available key encoding methods.\n *\n * @see https://github.com/nemtech/NIP/issues/12\n * @since 0.1.0\n */\nvar KeyEncoding;\n(function (KeyEncoding) {\n    KeyEncoding[KeyEncoding[\"ENC_HEX\"] = 0] = \"ENC_HEX\";\n    KeyEncoding[KeyEncoding[\"ENC_BIN\"] = 1] = \"ENC_BIN\";\n})(KeyEncoding = exports.KeyEncoding || (exports.KeyEncoding = {}));\n","const createHmac = require('create-hmac')\n\nconst ONE1 = Buffer.alloc(1, 1)\nconst ZERO1 = Buffer.alloc(1, 0)\n\n// https://tools.ietf.org/html/rfc6979#section-3.2\nfunction deterministicGenerateK (hash, x, checkSig, isPrivate, extraEntropy) {\n  // Step A, ignored as hash already provided\n  // Step B\n  // Step C\n  let k = Buffer.alloc(32, 0)\n  let v = Buffer.alloc(32, 1)\n\n  // Step D\n  k = createHmac('sha256', k)\n    .update(v)\n    .update(ZERO1)\n    .update(x)\n    .update(hash)\n    .update(extraEntropy || '')\n    .digest()\n\n  // Step E\n  v = createHmac('sha256', k).update(v).digest()\n\n  // Step F\n  k = createHmac('sha256', k)\n    .update(v)\n    .update(ONE1)\n    .update(x)\n    .update(hash)\n    .update(extraEntropy || '')\n    .digest()\n\n  // Step G\n  v = createHmac('sha256', k).update(v).digest()\n\n  // Step H1/H2a, ignored as tlen === qlen (256 bit)\n  // Step H2b\n  v = createHmac('sha256', k).update(v).digest()\n\n  let T = v\n\n  // Step H3, repeat until T is within the interval [1, n - 1] and is suitable for ECDSA\n  while (!isPrivate(T) || !checkSig(T)) {\n    k = createHmac('sha256', k)\n      .update(v)\n      .update(ZERO1)\n      .digest()\n\n    v = createHmac('sha256', k).update(v).digest()\n\n    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)\n    // Step H2b again\n    v = createHmac('sha256', k).update(v).digest()\n    T = v\n  }\n\n  return T\n}\n\nmodule.exports = deterministicGenerateK\n","export var apiUrl = process.env.NODE_ENV === 'production' ? 'http://120.79.181.170' : 'http://120.79.181.170';\r\nexport var bandedNamespace = ['nem', 'user', 'account', 'org', 'com', 'biz', 'net', 'edu', 'mil', 'gov ', 'info'];\r\nexport var AppConfig = {\r\n    apiUrl: 'http://120.79.181.170',\r\n    marketUrl: 'http://app.nemcn.io',\r\n};\r\n//error message\r\nexport var Message = {\r\n    COPY_SUCCESS: 'successful_copy',\r\n    SUCCESS: 'success',\r\n    OPERATION_SUCCESS: 'successful_operation',\r\n    UPDATE_SUCCESS: 'update_completed',\r\n    PLEASE_SET_WALLET_PASSWORD_INFO: 'please_set_your_wallet_password',\r\n    PLEASE_ENTER_MNEMONIC_INFO: 'Please_enter_a_mnemonic_to_ensure_that_the_mnemonic_is_correct',\r\n    PLEASE_SWITCH_NETWORK: 'walletCreateNetTypeRemind',\r\n    NO_MNEMONIC_INFO: 'no_mnemonic',\r\n    WALLET_NAME_INPUT_ERROR: 'walletCreateWalletNameRemind',\r\n    PASSWORD_CREATE_ERROR: 'createLockPWRemind',\r\n    INCONSISTENT_PASSWORD_ERROR: 'createLockCheckPWRemind',\r\n    PASSWORD_HIT_SETTING_ERROR: 'createLockPWTxtRemind',\r\n    WRONG_PASSWORD_ERROR: 'password_error',\r\n    MOSAIC_NAME_NULL_ERROR: 'mosaic_name_can_not_be_null',\r\n    QR_GENERATION_ERROR: 'QR_code_generation_failed',\r\n    ADDRESS_FORMAT_ERROR: 'address_format_error',\r\n    AMOUNT_LESS_THAN_0_ERROR: 'amount_can_not_be_less_than_0',\r\n    FEE_LESS_THAN_0_ERROR: 'fee_can_not_be_less_than_0',\r\n    SUPPLY_LESS_THAN_0_ERROR: 'supply_can_not_less_than_0',\r\n    DIVISIBILITY_LESS_THAN_0_ERROR: 'divisibility_can_not_less_than_0',\r\n    DURATION_LESS_THAN_0_ERROR: 'duration_can_not_less_than_0',\r\n    DURATION_MORE_THAN_1_YEARS_ERROR: 'duration_can_not_more_than_1_years',\r\n    DURATION_MORE_THAN_10_YEARS_ERROR: 'duration_can_not_more_than_10_years',\r\n    MNEMONIC_INCONSISTENCY_ERROR: 'Mnemonic_inconsistency',\r\n    PASSWORD_SETTING_INPUT_ERROR: 'walletCreatePasswordRemind',\r\n    MNENOMIC_INPUT_ERROR: 'Mnemonic_input_error',\r\n    OPERATION_FAILED_ERROR: 'operation_failed',\r\n    NODE_NULL_ERROR: 'point_null_error',\r\n    INPUT_EMPTY_ERROR: 'Any_information_cannot_be_empty',\r\n    CO_SIGNER_NULL_ERROR: 'co_signers_amount_less_than_0',\r\n    MIN_APPROVAL_LESS_THAN_0_ERROR: 'min_approval_amount_less_than_0',\r\n    MIN_REMOVAL_LESS_THAN_0_ERROR: 'min_removal_amount_less_than_0',\r\n    MAX_APPROVAL_MORE_THAN_10_ERROR: 'max_approval_amount_more_than_10',\r\n    MAX_REMOVAL_MORE_THAN_10_ERROR: 'max_removal_amount_more_than_10',\r\n    ILLEGAL_PUBLICKEY_ERROR: 'illegal_publickey',\r\n    ILLEGAL_MIN_APPROVAL_ERROR: 'min_approval_amount_illegal',\r\n    ILLEGAL_MIN_REMOVAL_ERROR: 'min_removal_amount_illegal',\r\n    MOSAIC_ID_FORMAT_ERROR: 'mosaic_id_format_error',\r\n    ALIAS_NAME_FORMAT_ERROR: 'alias_name_format_error',\r\n    DURATION_VALUE_LESS_THAN_1_ERROR: 'The_value_of_duration_cannot_be_less_than_1',\r\n    NAMESPACE_NULL_ERROR: 'Namespace_cannot_be_a_null_or_empty_string',\r\n    ROOT_NAMESPACE_TOO_LONG_ERROR: 'The_root_namespace_cannot_be_longer_than_16',\r\n    NAMESPACE_STARTING_ERROR: 'Namespace_must_start_with_a_letter',\r\n    NAMESPACE_FORMAT_ERROR: 'Namespace_can_only_contain_numbers_letters_and_other',\r\n    NAMESPACE_USE_BANDED_WORD_ERROR: 'Namespace_cannot_use_forbidden_words',\r\n    SUB_NAMESPACE_LENGTH_LONGER_THAN_64_ERROR: 'The_sub_namespace_cannot_be_longer_than_16'\r\n};\r\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}